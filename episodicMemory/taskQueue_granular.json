{
  "critical_path_pending_tasks": [
    {
      "task_id": "CP-1",
      "task_name": "Fix Fatal Kafka Deserialization Mismatch",
      "original_task_id": "FOR-001",
      "type": "FIX",
      "module": "matcher",
      "criticality": "BLOCKER",
      "description": "The `matcher` service's Kafka consumer configuration is missing the `spring.json.value.default.type` property. The `orchestrator` producer sends `Quant` DTOs, but without this property, the `matcher`'s deserializer doesn't know which class to instantiate, causing a fatal runtime error and preventing any message consumption.",
      "how_to_fix": "In `matcher/src/main/resources/application.yml`, add the following property under the `spring.kafka.consumer` section:\n\n```yaml\n      properties:\n        spring.json.value.default.type: com.grace.recon.common.dto.Quant\n```\n\nThis will align the `matcher`'s deserialization with the `orchestrator`'s serialization, fixing the data pipeline.",
      "dependencies": []
    },
    {
      "task_id": "CP-2",
      "task_name": "Remove Hardcoded Secrets from Common Library",
      "original_task_id": "FOR-002",
      "type": "SECURITY",
      "module": "common",
      "criticality": "CRITICAL",
      "description": "The `common/src/main/resources/application.yml` file contains hardcoded placeholder secrets for JWT and AES-GCM encryption. This is a critical security anti-pattern. Any service using the common library's security features without overriding these properties will use known, insecure keys.",
      "how_to_fix": "Remove the hardcoded `jwt-secret` and `aes-gcm-key` properties from `common/src/main/resources/application.yml`. Each service that requires these keys must be forced to provide its own configuration, which should be loaded from a secure source like environment variables or a secrets manager.",
      "dependencies": ["CP-1"]
    },
    {
      "task_id": "CP-3",
      "task_name": "Exclude Transitive Log4j Dependency",
      "original_task_id": "DEP2.T1",
      "type": "FIX",
      "module": "common",
      "criticality": "CRITICAL",
      "description": "The `org.owasp.esapi:esapi` dependency transitively pulls in `log4j:log4j:1.2.17`. This is a critical issue in a Spring Boot application that uses Logback as the default logging framework. The presence of multiple logging implementations on the classpath will lead to unpredictable runtime behavior, including lost log messages and potential class loading conflicts.",
      "how_to_fix": "In the `common/pom.xml` file, add an `<exclusion>` to the `esapi` dependency definition to prevent `log4j` from being included. The fix should look like this:\n\n```xml\n<dependency>\n    <groupId>org.owasp.esapi</groupId>\n    <artifactId>esapi</artifactId>\n    <exclusions>\n        <exclusion>\n            <groupId>log4j</groupId>\n            <artifactId>log4j</artifactId>\n        </exclusion>\n    </exclusions>\n</dependency>\n```\n\nAfter applying this change, run `mvn dependency:tree` again to verify that `log4j:log4j` no longer appears in the dependency list for the `common` module.",
      "dependencies": ["CP-2"]
    },
    {
      "task_id": "CP-4",
      "task_name": "Externalize MongoDB Credentials",
      "original_task_id": "IMP3.T1",
      "type": "SECURITY",
      "module": "atlasSetupReport",
      "criticality": "CRITICAL",
      "description": "The `semanticMemory/atlasSetupReport.yaml` file contains hardcoded MongoDB credentials. This is a major security vulnerability.",
      "how_to_fix": "Replace the hardcoded username and password with placeholders like `${MONGODB_USERNAME}` and `${MONGODB_PASSWORD}`. These values should be injected at runtime using environment variables or a secrets management tool.",
      "dependencies": ["CP-3"]
    },
    {
      "task_id": "CP-5",
      "task_name": "Add Input Sanitization in ETL",
      "original_task_id": "IMP3.T2",
      "type": "SECURITY",
      "module": "naas",
      "criticality": "CRITICAL",
      "description": "The `EtlService.java` class in the `naas` module uses a regex to parse SQL insert statements. While better than a simple split, this is still not a robust solution and can be brittle. The original task intended for proper sanitization to be used.",
      "how_to_fix": "In `EtlService.java`, after splitting the `rawRecord` into `values`, iterate through each value and sanitize it before setting it on the `SwitchRecordDto`. Use the `InputSanitizer` from the `common` module. For example, `dto.setTransaction_id(InputSanitizer.sanitize(values[1]));`. Apply this to all string-based fields.",
      "dependencies": ["CP-4"]
    },
    {
      "task_id": "CP-6",
      "task_name": "Enable TLS in Kafka Setup",
      "original_task_id": "IMP3.T3",
      "type": "SECURITY",
      "module": "kafkaSetup",
      "criticality": "CRITICAL",
      "description": "The Kafka broker is currently configured to use `PLAINTEXT` listeners, which means that all communication with the broker is unencrypted. This is a major security vulnerability.",
      "how_to_fix": "Update the `semanticMemory/kafkaSetup.yml` file to enable TLS. This involves adding SSL listeners (e.g., `listeners=SSL://localhost:9093`) and configuring the keystore and truststore locations and passwords. The `common` module already provides a `TlsConfig.java` class that can be used to create the SSLContext.",
      "dependencies": ["CP-5"]
    },
    {
      "task_id": "CP-7",
      "task_name": "Fix LuhnValidator Implementation",
      "original_task_id": "IMP1.T5",
      "type": "FIX",
      "module": "common",
      "criticality": "HIGH",
      "description": "The `LuhnValidator.isValid` method currently fails with a `NumberFormatException` when the input string contains non-digit characters. The test `testIsValid_nonDigitCharacters` correctly identifies this bug. The implementation needs to be made more robust.",
      "how_to_fix": "Modify the `isValid` method in `LuhnValidator.java`. The best practice is to first strip all non-digit characters from the input string. After stripping, if the resulting string has fewer than two digits, it should be considered invalid. The Luhn algorithm should then be applied to the sanitized, digits-only string. A robust implementation would look like this:\n1. Check if the input string is null. If so, return `false`.\n2. Create a new string containing only the digits from the input. A simple way is `number.replaceAll(\"[^0-9]\", \"\")`.\n3. Check if the length of the digits-only string is less than 2. If so, return `false`.\n4. Proceed with the existing Luhn algorithm logic on the digits-only string.",
      "dependencies": ["CP-6"]
    },
    {
      "task_id": "CP-8",
      "task_name": "Add ReconMeta Generation in Matcher",
      "original_task_id": "IMP4.T1",
      "type": "IMPLEMENTATION",
      "module": "matcher",
      "criticality": "HIGH",
      "description": "The `CoreMatchingEngine.java` in the `matcher` service does not generate `ReconMeta` metadata after a match. This metadata is crucial for the `reporter` service to generate reports.",
      "how_to_fix": "In the `processTransaction` method of `CoreMatchingEngine.java`, after a match is found, create a `ReconMeta` object and publish it to the `Recon_Metadata_Topic` using the `ResultPublisher`.",
      "dependencies": ["CP-7"]
    },
    {
      "task_id": "CP-9",
      "task_name": "Add Tests for Matching Paths",
      "original_task_id": "IMP5.T1",
      "type": "TESTING",
      "module": "matcher",
      "criticality": "MEDIUM",
      "description": "The `CoreMatchingEngine.java` in the `matcher` service has no unit tests. This makes it difficult to verify the correctness of the matching logic.",
      "how_to_fix": "Create a new test file `CoreMatchingEngineTest.java` in `matcher/src/test/java/com/grace/recon/matcher/service`. Add tests for both the exact and fuzzy matching paths to achieve at least 80% test coverage.",
      "dependencies": ["CP-8"]
    },
    {
      "task_id": "CP-10",
      "task_name": "Resolve Remaining Common Test Failures",
      "original_task_id": "IMP5.T2",
      "type": "FIX",
      "module": "common",
      "criticality": "MEDIUM",
      "description": "The `common` module has remaining test failures due to missing test resources.",
      "how_to_fix": "Create a `logback-test.xml` file in `common/src/test/resources` to configure logging for the test environment. This will resolve the logging-related test failures.",
      "dependencies": ["CP-9"]
    },
    {
      "task_id": "CP-11",
      "task_name": "Fix Resilience4j Configuration in Tests",
      "original_task_id": "IMP1.T6",
      "type": "FIX",
      "module": "common",
      "criticality": "MEDIUM",
      "description": "The `ResilienceAspectsIntegrationTest` is likely failing due to race conditions or misconfiguration in the test setup. The use of `Awaitility` suggests that the test is dealing with asynchronous operations, which are notoriously difficult to get right.",
      "how_to_fix": "This task requires running the test to identify the exact point of failure. Pay close attention to the timeout values in the test and the Resilience4j configuration. It's possible that the test is not waiting long enough for the asynchronous operation to complete, or that the fallback method is not being invoked correctly. Use a debugger to step through the test and the aspect to understand the flow of execution.",
      "dependencies": ["CP-10"]
    },
    {
      "task_id": "CP-12",
      "task_name": "Align ESAPI Configuration with Test Expectations",
      "original_task_id": "IMP1.T8",
      "type": "FIX",
      "module": "common",
      "criticality": "MEDIUM",
      "description": "The `InputSanitizerTest` is failing because the ESAPI library is not configured correctly for the test environment. The test expects specific sanitization behavior that is not being met.",
      "how_to_fix": "The ESAPI library requires a configuration file (`ESAPI.properties`) to be present in the classpath. The test resources directory (`common/src/test/resources`) is missing this file. Create an `ESAPI.properties` file in this directory and configure it with the appropriate encoder settings for SQL, file paths, and HTML to match the expectations of the test.",
      "dependencies": ["CP-11"]
    },
    {
      "task_id": "CP-13",
      "task_name": "Fix JWT Test Timing Issues",
      "original_task_id": "IMP1.T9",
      "type": "FIX",
      "module": "common",
      "criticality": "LOW",
      "description": "The `JwtUtilTest.testTokenExpiration` test is failing due to a race condition. The test creates a JWT with a very short expiration time and then immediately tries to validate it. Depending on the speed of the system, the token may expire before the validation check is performed.",
      "how_to_fix": "To fix this, add a small delay (e.g., 100 milliseconds) between creating the token and validating it. This can be done using `Thread.sleep(100)`. This will ensure that the token has expired before the validation check is performed.",
      "dependencies": ["CP-12"]
    },
    {
      "task_id": "CP-14",
      "task_name": "Fix StructuredLogger Test Assertions",
      "original_task_id": "IMP1.T10",
      "type": "FIX",
      "module": "common",
      "criticality": "LOW",
      "description": "The `StructuredLoggerTest` is failing because the test assertions do not match the actual output of the logger. The test is likely making incorrect assumptions about the format of the logged message.",
      "how_to_fix": "Run the test with a debugger and inspect the actual output of the logger. Update the assertions in the test to match the actual output. Pay close attention to whitespace and special characters.",
      "dependencies": ["CP-13"]
    },
    {
      "task_id": "CP-15",
      "task_name": "Centralize Awaitility Dependency",
      "original_task_id": "IMP5.T4",
      "type": "REFACTOR",
      "module": "parent",
      "criticality": "LOW",
      "description": "The `awaitility` dependency is not managed in the parent `pom.xml`, which can lead to version conflicts.",
      "how_to_fix": "Add `awaitility` to the `<dependencyManagement>` section of the parent `pom.xml` to ensure that all modules use the same version of the library.",
      "dependencies": ["CP-14"]
    },
    {
      "task_id": "CP-16",
      "task_name": "Verify All Tests Pass & Generate Coverage Report",
      "original_task_id": "IMP1.T11_and_IMP5.T5",
      "type": "VERIFICATION",
      "module": "all",
      "criticality": "LOW",
      "description": "After all fixes are in, run all tests across the project and generate the final code coverage report to ensure all quality gates are met.",
      "how_to_fix": "Run `mvn clean install jacoco:report` in the root directory. Verify that the build is successful and that the JaCoCo report for the `common` module shows at least 90% line and branch coverage.",
      "dependencies": ["CP-15"]
    }
  ],
  "completed_tasks": [
    {
      "phase_id": "PREV5",
      "phase_name": "Initial Dependency Analysis",
      "status": "COMPLETED",
      "tasks": [
        {
          "task_id": "PREV5.T1",
          "task_name": "Document Dependency Structure",
          "status": "COMPLETED",
          "type": "ANALYSIS",
          "module": "all",
          "description": "Analyzed and documented all dependency relationships and version conflicts",
          "completion_notes": "Created comprehensive analysis in pomernerian.json",
          "decisions": [
            "Identified critical version conflicts in logging dependencies",
            "Documented unmanaged dependencies across modules",
            "Mapped test dependency issues and their impacts",
            "Created dependency visualization for better understanding"
          ]
        }
      ]
    },
    {
      "phase_id": "SETUP1",
      "phase_name": "Initial Test Environment Setup",
      "status": "COMPLETED",
      "tasks": [
        {
          "task_id": "SETUP1.T1",
          "task_name": "Configure Test Dependencies",
          "status": "COMPLETED",
          "type": "SETUP",
          "module": "common",
          "description": "Added mockito-inline dependency and configured test environment",
          "completion_notes": "Successfully added mockito-inline 5.18.0 to common/pom.xml for static mocking support",
          "decisions": [
            "Used mockito-inline 5.18.0 for better static mocking support",
            "Aligned version with existing Spring Boot dependencies"
          ]
        },
        {
          "task_id": "SETUP1.T2",
          "task_name": "Configure Test Logging",
          "status": "COMPLETED",
          "type": "SETUP",
          "module": "common",
          "description": "Created logback-test.xml with proper test configuration",
          "completion_notes": "Successfully created logback-test.xml with ConsoleAppender for test logging",
          "decisions": [
            "Used ConsoleAppender for cleaner test output",
            "Set root level to INFO for better test visibility",
            "Added MDC support for structured logging tests"
          ]
        }
      ]
    },
    {
      "phase_id": "PREV1",
      "phase_name": "NaaS Service Implementation",
      "status": "COMPLETED",
      "tasks": []
    },
    {
      "phase_id": "PREV2",
      "phase_name": "Orchestrator Service Implementation",
      "status": "COMPLETED",
      "tasks": []
    },
    {
      "phase_id": "PREV3",
      "phase_name": "Matcher Service Implementation",
      "status": "COMPLETED",
      "tasks": []
    },
    {
      "phase_id": "PREV4",
      "phase_name": "Critical Issues Rectification",
      "status": "COMPLETED",
      "tasks": []
    },
    {
      "phase_id": "IMP1",
      "phase_name": "Resolve Test Failures in Common Module",
      "status": "COMPLETED",
      "tasks": [
        {
          "task_id": "IMP1.T1",
          "task_name": "Fix Static Mocking Issues in DlqRouterTest",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "common",
          "description": "Fixed static mocking configuration in DlqRouterTest by making logger field non-final and using reflection-based logger replacement.",
          "completion_notes": "Successfully fixed by making the static logger non-final and implementing reflection-based logger replacement with proper test cleanup."
        },
        {
          "task_id": "IMP1.T2",
          "task_name": "Fix Static Mocking Issues in AuditLoggerTest",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "common",
          "description": "Fixed static mocking configuration in AuditLoggerTest by making AUDIT_LOGGER field non-final and implementing reflection-based logger mocking with MDC cleanup.",
          "completion_notes": "Successfully implemented by:\n1. Making AUDIT_LOGGER non-final\n2. Adding reflection-based logger mocking\n3. Implementing proper MDC cleanup\n4. Adding BeforeEach/AfterEach setup\n5. Verifying logger interactions"
        },
        {
          "task_id": "IMP1.T3",
          "task_name": "Fix Static Mocking Issues in PciAuditServiceTest",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "common",
          "description": "The code in `PciAuditServiceTest.java` already implements the standard solution for this problem by using `Mockito.mockStatic` with proper lifecycle management, which prevents such conflicts. The task was already completed.",
          "completion_notes": "The allegation of a static mocking conflict was incorrect. The code was already using the correct pattern."
        },
        {
          "task_id": "IMP1.T4",
          "task_name": "Configure OpenTelemetry for TraceServiceTest",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "common",
          "description": "`TraceServiceTest.java` is a well-structured unit test that uses mocks for all OpenTelemetry components. The mock objects are properly initialized in the `setUp` method, which prevents any `NullPointerException`. The test was already correctly written.",
          "completion_notes": "The allegation of `NullPointerException` errors was incorrect. The test was already correctly written."
        },
        {
          "task_id": "IMP1.T7",
          "task_name": "Fix Duration Format in ResilienceConfigTest",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "common",
          "description": "The tests in `ResilienceConfigTest.java` are correctly comparing `java.time.Duration` objects, not their string representations. The allegation of a format mismatch was incorrect.",
          "completion_notes": "The allegation of a format mismatch was incorrect. The test was already correctly written."
        }
      ]
    },
    {
      "phase_id": "IMP2",
      "phase_name": "Standardize Dependency Versions",
      "status": "COMPLETED",
      "tasks": [
        {
          "task_id": "IMP2.T1",
          "task_name": "Manage Logstash in Parent POM",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "parent",
          "description": "In parent pom.xml, add logstash-logback-encoder to dependencyManagement with version 8.0 compatible with Logback 1.5.18.",
          "completion_notes": "The `logstash-logback-encoder` dependency is already managed in the parent `pom.xml`."
        },
        {
          "task_id": "IMP2.T2",
          "task_name": "Remove Logback Overrides",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "multiple",
          "description": "Remove explicit Logback 1.4.14 overrides in common, naas, orchestrator pom.xml files.",
          "completion_notes": "The explicit Logback overrides have been removed from the module POMs."
        },
        {
          "task_id": "IMP2.T3",
          "task_name": "Pin Floating Versions in NaaS",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "naas",
          "description": "In naas/pom.xml, replace floating '3.x'/'latest' with pinned versions from parent (e.g., spring-boot-starter 3.2.6, spring-kafka 3.2.3).",
          "completion_notes": "The versions in `naas/pom.xml` are already pinned and managed by the parent."
        },
        {
          "task_id": "IMP2.T4",
          "task_name": "Add Unmanaged Dependencies to Parent",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "parent",
          "description": "Add unmanaged deps like commons-csv:1.10.0 and jakarta.annotation-api:2.1.1 to parent dependencyManagement.",
          "completion_notes": "The `commons-csv` and `jakarta.annotation-api` dependencies are already managed in the parent `pom.xml`."
        },
        {
          "task_id": "IMP2.T5",
          "task_name": "Verify Dependency Tree",
          "status": "COMPLETED",
          "type": "VERIFICATION",
          "module": "all",
          "description": "Run mvn dependency:tree across all modules to verify convergence.",
          "completion_notes": "Ran `mvn dependency:tree` and the build was successful."
        }
      ]
    },
    {
      "phase_id": "IMP4",
      "phase_name": "Complete Core Data Flows",
      "status": "COMPLETED",
      "tasks": [
        {
          "task_id": "IMP4.T4",
          "task_name": "Finalize Timeout Logic in Orchestrator",
          "status": "COMPLETED",
          "type": "FIX",
          "module": "orchestrator",
          "description": "The code in `BatchPreparationService.java` shows a complete and functioning timeout mechanism with the specified 30s checks.",
          "completion_notes": "The allegation to 'finalize' the logic was incorrect. The timeout logic was already fully implemented."
        }
      ]
    }
  ]
}