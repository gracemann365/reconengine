{
  "version": "1.3",
  "lastUpdated": "2025-07-12T17:30:00Z",
  "agentProhibitions": [
    {
      "id": "PROHIBIT-001",
      "rule": "NEVER use simple string splitting (e.g., split(',')) for complex data formats like SQL, CSV, or quoted/escaped data",
      "reason": "Fails on edge cases like quoted commas or NULL values (e.g., ETL-002)",
      "action": "Use format-aware parsers or robust regex"
    },
    {
      "id": "PROHIBIT-002",
      "rule": "NEVER assume external systems (e.g., Kafka, databases) work without isolated testing",
      "reason": "Misconfigurations cause silent failures (e.g., INFRA-001)",
      "action": "Test independently with console tools before integration"
    },
    {
      "id": "PROHIBIT-003",
      "rule": "NEVER change types (e.g., DTOs) without a full dependency audit",
      "reason": "Cascading errors across serialization and tests (e.g., ETL-003)",
      "action": "Map all affected components before changes"
    },
    {
      "id": "PROHIBIT-004",
      "rule": "NEVER rely on default serialization for complex objects",
      "reason": "Mismatches cause runtime exceptions (e.g., KAFKA-001)",
      "action": "Explicitly configure serializers/deserializers"
    },
    {
      "id": "PROHIBIT-005",
      "rule": "NEVER blame configuration before checking the environment",
      "reason": "Missing directories or permissions masquerade as config issues (e.g., BUILD-001)",
      "action": "Verify files, permissions, and processes first"
    },
    {
      "id": "PROHIBIT-006",
      "rule": "NEVER iterate more than two simple fixes without deeper analysis",
      "reason": "Masks root causes and wastes time (e.g., BUILD-003)",
      "action": "Escalate to dependency graphs or minimal examples after two failures"
    },
    {
      "id": "PROHIBIT-007",
      "rule": "NEVER deploy unsecured endpoints that modify core logic",
      "reason": "Exposes system to unauthorized changes (e.g., CP9.T3 lesson)",
      "action": "Secure endpoints with role-based authentication"
    },
    {
      "id": "PROHIBIT-008",
      "rule": "NEVER attempt to fix test-specific dependency issues by modifying main application code or introducing conflicting test configurations",
      "reason": "Leads to a destructive trial-and-error loop, breaks core application functionality, and creates BeanDefinitionOverrideException",
      "action": "Understand Spring Test Context, use programmatic test-only consumers, and ensure unified configuration"
    },
    {
      "id": "PROHIBIT-009",
      "rule": "NEVER attempt surgical fixes on deeply intertwined compilation errors after initial failures",
      "reason": "Leads to 'whack-a-mole' debugging, creates new errors, and prolongs resolution (e.g., AGENT-003)",
      "action": "Perform holistic file replacements or re-scaffolding when multiple, related errors persist"
    },
    {
      "id": "PROHIBIT-010",
      "rule": "NEVER assume successful compilation implies successful runtime",
      "reason": "Compilation only checks syntax and type compatibility; runtime errors (e.g., Spring context issues, misconfigurations) can still prevent application startup (e.g., AGENT-004)",
      "action": "Always perform runtime verification (e.g., attempt application startup, run integration tests) after critical changes, especially configuration-related ones."
    }
  ],
  "criticalErrorPatterns": [
    {
      "id": "PATTERN-001",
      "title": "Incomplete Type/Dataflow Audit",
      "severity": "CRITICAL",
      "description": "Changing types without tracing downstream effects causes cascading errors",
      "whyTricky": "Hidden dependencies break silently",
      "prevention": [
        "Map ALL affected components before type changes",
        "Test compatibility forward and backward"
      ],
      "examples": ["ETL-003", "AGENT-001"]
    },
    {
      "id": "PATTERN-002",
      "title": "Naive Data Parsing",
      "severity": "CRITICAL",
      "description": "Using split(',') on complex data fails on edge cases",
      "whyTricky": "Works for simple cases but fails on edge cases",
      "prevention": ["Use dedicated parsers or regex"],
      "examples": ["ETL-002"]
    },
    {
      "id": "PATTERN-003",
      "title": "External System Assumptions",
      "severity": "CRITICAL",
      "description": "Assuming external systems are ready without testing leads to failures",
      "whyTricky": "Partial configs deceive into thinking it’s working",
      "prevention": ["Test external systems in isolation first"],
      "examples": ["INFRA-001"]
    },
    {
      "id": "PATTERN-004",
      "title": "Configuration Scope Confusion",
      "severity": "HIGH",
      "description": "Misapplying config breaks builds",
      "whyTricky": "Docs assume knowledge of inheritance rules",
      "prevention": ["Read version-specific docs for scope rules"],
      "examples": ["BUILD-002"]
    },
    {
      "id": "PATTERN-005",
      "title": "Environment vs. Configuration Blame",
      "severity": "HIGH",
      "description": "Debugging config when environment is the issue wastes time",
      "whyTricky": "Error messages often mislead",
      "prevention": ["Check filesystem and permissions first"],
      "examples": ["BUILD-001"]
    },
    {
      "id": "PATTERN-006",
      "title": "Iterative Surgical Fixes on Systemic Issues",
      "severity": "CRITICAL",
      "description": "Attempting small, isolated fixes on deeply interconnected architectural flaws",
      "whyTricky": "Fixing one symptom often creates new, related symptoms, leading to a prolonged and frustrating debugging cycle.",
      "prevention": [
        "When multiple related compilation errors appear, especially after DTO or core logic changes, immediately switch to a holistic analysis.",
        "Consider full file replacements or re-scaffolding for affected modules to ensure consistency."
      ],
      "examples": ["AGENT-003"]
    },
    {
      "id": "PATTERN-007",
      "title": "Compilation Success, Runtime Failure",
      "severity": "CRITICAL",
      "description": "A successful build (compilation) does not guarantee a successful application startup or runtime. Configuration errors, missing beans, or environment issues can still cause failures.",
      "whyTricky": "The build process provides a false sense of security, as it only validates code syntax and dependencies, not runtime behavior.",
      "prevention": [
        "Always include runtime verification (e.g., attempting application startup, running integration tests) as part of the verification process after significant changes, especially those affecting configuration or Spring context.",
        "Prioritize analysis of application logs for startup errors."
      ],
      "examples": ["AGENT-004"]
    }
  ],
  "keyExamples": [
    {
      "id": "BUILD-001",
      "description": "Blamed POM for a missing directory",
      "lesson": "Check environment first"
    },
    {
      "id": "ETL-002",
      "description": "split(',') on SQL INSERT failed on quoted commas",
      "lesson": "Use proper parsers"
    },
    {
      "id": "KAFKA-001/002",
      "description": "Default Kafka serialization broke DTOs",
      "lesson": "Configure serializers explicitly"
    },
    {
      "id": "INFRA-001",
      "description": "Kafka seemed to start but wasn’t fully configured",
      "lesson": "Test externally first"
    },
    {
      "id": "ETL-003",
      "description": "Changed Quant DTO without auditing, broke everything",
      "lesson": "Full audit before type changes"
    },
    {
      "id": "AGENT-002",
      "description": "Attempted to fix Spring Test Context issues by modifying main application Kafka producer to use StringSerializer and introducing conflicting test configurations, leading to a destructive trial-and-error loop and breaking core functionality.",
      "lesson": "Understand Spring Test Context, use programmatic test-only consumers, and ensure unified configuration. Adhere to PROHIBIT-003, PROHIBIT-004, and PROHIBIT-006."
    },
    {
      "id": "AGENT-003",
      "description": "Persisted with surgical fixes (imports, method calls) on orchestrator module after multiple compilation failures, leading to a prolonged debugging cycle and new errors (e.g., TimedQuant missing, QuantPair type mismatch). This was a direct violation of PROHIBIT-006.",
      "lesson": "When facing multiple, interconnected compilation errors, especially after core DTO or logic changes, a holistic file replacement or re-scaffolding is more efficient than iterative surgical fixes. Trust the user's guidance for complete solutions."
    },
    {
      "id": "AGENT-004",
      "description": "Failed to identify critical Spring BeanDefinitionOverrideException during initial 'system-wide sweep' because the sweep focused only on compilation success (mvn clean install -DskipTests) and did not include runtime verification or log analysis.",
      "lesson": "Compilation success does not guarantee runtime success. Always include runtime verification (e.g., application startup, integration tests, log analysis) in comprehensive sweeps, especially after configuration changes."
    }
  ],
  "agentBestPractices": [
    {
      "id": "BP-001",
      "practice": "Start with the Environment",
      "details": "Check files, permissions, and processes before configs"
    },
    {
      "id": "BP-002",
      "practice": "Read Version-Specific Docs",
      "details": "Understand tool behavior for the exact version in use"
    },
    {
      "id": "BP-003",
      "practice": "Audit Before Changing Types",
      "details": "Map every dependency and test compatibility"
    },
    {
      "id": "BP-004",
      "practice": "Use Robust Parsers",
      "details": "No shortcuts on complex data—use libraries or regex"
    },
    {
      "id": "BP-005",
      "practice": "Test External Systems Alone",
      "details": "Verify Kafka, DBs, etc., independently first"
    },
    {
      "id": "BP-006",
      "practice": "Escalate Fast with Structured Analysis",
      "details": "After two failed fixes, perform the following steps:\n- Generate a minimal reproducible example.\n- Validate the environment (files, permissions, processes).\n- Test external systems in isolation (e.g., using console tools).\n- Use dependency analysis tools (e.g., 'mvn dependency:tree') to identify root causes."
    },
    {
      "id": "BP-007",
      "practice": "Validate Configurations Proactively",
      "details": "Check config files against runtime objects at startup to prevent errors (e.g., CP9.T3 rules validation)"
    },
    {
      "id": "BP-008",
      "practice": "Optimize Performance with Caching",
      "details": "Cache expensive operations (e.g., reflection lookups) for efficiency (e.g., CP9.T3 fieldCache)"
    },
    {
      "id": "BP-009",
      "practice": "Adopt a Defensive Mindset",
      "details": "Always assume that data, environment, and systems may have hidden issues. Proactively validate assumptions, consider edge cases, and map dependencies before making changes."
    },
    {
      "id": "BP-010",
      "practice": "Prioritize Holistic Solutions for Systemic Issues",
      "details": "When facing multiple, interconnected compilation errors, especially after core DTO or logic changes, prioritize holistic file replacements or re-scaffolding over iterative surgical fixes. This ensures consistency and accelerates resolution."
    },
    {
      "id": "BP-011",
      "practice": "Comprehensive Verification (Build + Runtime)",
      "details": "Always include both build-time (compilation, packaging) and runtime (application startup, integration tests, log analysis) verification in any comprehensive system sweep or after critical changes, especially those affecting configuration or Spring context. Compilation success is not sufficient."
    }
  ]
}