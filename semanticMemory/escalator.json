{
  "moduleName": "escalator",
  "description": "Escalator Microservice for the Reconciliation Engine PoC - Handles automated and manual escalation workflows for unmatched transactions",
  "version": "1.0.0-SNAPSHOT",
  "type": "Spring Boot Service",
  "groupId": "com.grace.recon",
  "artifactId": "escalator",
  "dependencyVersions": {
    "java": {
      "version": "21",
      "source": "${java.version} from parent pom"
    },
    "springBoot": {
      "version": "3.2.6",
      "source": "${spring-boot.version} from parent pom"
    },
    "springKafka": {
      "version": "3.2.3",
      "source": "Defined in parent pom dependencyManagement"
    },
    "mongodb": {
      "version": "4.11.1",
      "source": "spring-boot-starter-data-mongodb dependency",
      "atlasCluster": {
        "name": "limitless",
        "type": "Free Tier (M0) Shared Cluster",
        "provider": "AWS",
        "region": "Mumbai (ap-south-1)",
        "connectionDetails": {
          "type": "Application Connection (SRV URI)",
          "driver": "Java",
          "apiVersion": "Stable API 5.1 or later",
          "configuration": {
            "retryWrites": true,
            "w": "majority",
            "appName": "limitless"
          }
        },
        "security": {
          "authentication": "SCRAM-SHA-256",
          "tls": "1.3 Required",
          "networkAccess": "IP Whitelist"
        }
      }
    },
    "lombok": {
      "version": "1.18.30",
      "source": "Defined in parent pom dependencyManagement"
    },
    "testFrameworks": {
      "junit": {
        "version": "5.10.0",
        "source": "${junit-jupiter.version} from parent pom"
      },
      "mockito": {
        "version": "5.18.0",
        "source": "${mockito.version} from parent pom"
      }
    }
  },
  "mainComponents": {
    "EscalatorApplication": {
      "description": "Main Spring Boot application class for the escalation service",
      "sourceLocation": {
        "path": "src/main/java/com/grace/recon/escalator/EscalatorApplication.java",
        "status": "Empty file - needs implementation"
      }
    },
    "suggestedComponents": {
      "EscalationProcessor": {
        "description": "Core component for processing escalation workflows",
        "suggestedPath": "src/main/java/com/grace/recon/escalator/processor/EscalationProcessor.java",
        "responsibilities": [
          "Process unmatched transactions for escalation",
          "Apply escalation rules and thresholds",
          "Route escalations to appropriate handlers"
        ],
        "requiredMethods": [
          {
            "signature": "processUnmatchedTransaction(UnmatchedTransaction transaction)",
            "purpose": "Evaluate transaction for escalation",
            "suggestedImplementation": {
              "steps": [
                "Validate transaction data",
                "Apply escalation rules",
                "Determine escalation level",
                "Create escalation record",
                "Trigger notifications"
              ]
            }
          },
          {
            "signature": "determineEscalationLevel(TransactionContext context)",
            "purpose": "Calculate appropriate escalation level",
            "logic": {
              "factors": [
                "Transaction amount",
                "Age of mismatch",
                "Previous escalation attempts",
                "Business impact"
              ],
              "levels": [
                {
                  "level": "L1",
                  "conditions": [
                    "amount < 1000",
                    "age < 24 hours"
                  ]
                },
                {
                  "level": "L2",
                  "conditions": [
                    "1000 <= amount < 10000",
                    "24 hours <= age < 48 hours"
                  ]
                },
                {
                  "level": "L3",
                  "conditions": [
                    "amount >= 10000",
                    "age >= 48 hours",
                    "previousAttempts >= 2"
                  ]
                }
              ]
            }
          }
        ]
      },
      "EscalationRuleEngine": {
        "description": "Rule engine for escalation decision making",
        "suggestedPath": "src/main/java/com/grace/recon/escalator/rules/EscalationRuleEngine.java",
        "components": {
          "RuleLoader": {
            "description": "Loads and validates escalation rules",
            "ruleFormat": {
              "type": "YAML",
              "schema": {
                "conditions": ["amount", "age", "source", "category"],
                "actions": ["notify", "escalate", "log"],
                "priorities": ["LOW", "MEDIUM", "HIGH", "CRITICAL"]
              }
            }
          },
          "RuleEvaluator": {
            "description": "Evaluates transactions against rules",
            "features": [
              "Dynamic rule compilation",
              "Rule chaining",
              "Context awareness",
              "Performance optimization"
            ]
          }
        }
      },
      "NotificationService": {
        "description": "Handles all escalation-related notifications",
        "suggestedPath": "src/main/java/com/grace/recon/escalator/notification/NotificationService.java",
        "channels": {
          "email": {
            "provider": "SMTP",
            "templates": [
              {
                "name": "L1_ESCALATION",
                "subject": "L1 Escalation: Transaction {{transactionId}}",
                "recipients": ["team-leads@company.com"]
              },
              {
                "name": "L2_ESCALATION",
                "subject": "Urgent: L2 Escalation for {{transactionId}}",
                "recipients": ["managers@company.com"]
              },
              {
                "name": "L3_ESCALATION",
                "subject": "Critical: L3 Escalation Required",
                "recipients": ["directors@company.com", "compliance@company.com"]
              }
            ]
          },
          "slack": {
            "channels": {
              "l1": "#recon-escalations",
              "l2": "#recon-urgent",
              "l3": "#recon-critical"
            }
          }
        }
      },
      "EscalationRepository": {
        "description": "MongoDB repository for escalation records",
        "suggestedPath": "src/main/java/com/grace/recon/escalator/repository/EscalationRepository.java",
        "schema": {
          "EscalationRecord": {
            "fields": [
              {
                "name": "id",
                "type": "ObjectId",
                "index": "Primary"
              },
              {
                "name": "transactionId",
                "type": "String",
                "index": true
              },
              {
                "name": "level",
                "type": "Enum",
                "values": ["L1", "L2", "L3"]
              },
              {
                "name": "status",
                "type": "Enum",
                "values": ["PENDING", "IN_PROGRESS", "RESOLVED", "CLOSED"]
              },
              {
                "name": "createdAt",
                "type": "Date",
                "index": true
              },
              {
                "name": "updatedAt",
                "type": "Date"
              },
              {
                "name": "assignedTo",
                "type": "String"
              },
              {
                "name": "resolution",
                "type": "Object",
                "fields": {
                  "resolvedBy": "String",
                  "resolution": "String",
                  "resolvedAt": "Date"
                }
              }
            ],
            "indexes": [
              {
                "name": "status_level_idx",
                "fields": ["status", "level"],
                "type": "Compound"
              },
              {
                "name": "assignedTo_status_idx",
                "fields": ["assignedTo", "status"],
                "type": "Compound"
              }
            ]
          }
        }
      }
    }
  },
  "dataFlowAnalysis": {
    "kafka": {
      "topics": {
        "input": {
          "name": "unmatched-transactions",
          "format": "Avro",
          "partitions": 6,
          "retentionMs": 604800000,
          "replicationFactor": 3
        },
        "output": {
          "name": "escalation-events",
          "format": "Avro",
          "partitions": 6,
          "retentionMs": 604800000,
          "replicationFactor": 3
        }
      },
      "consumerGroups": {
        "main": {
          "groupId": "escalator-main",
          "instances": 3,
          "config": {
            "auto.offset.reset": "earliest",
            "enable.auto.commit": false,
            "isolation.level": "read_committed"
          }
        }
      }
    },
    "mongodb": {
      "collections": {
        "escalations": {
          "shardKey": {
            "transactionId": "hashed"
          },
          "indexes": [
            {
              "name": "status_level_created",
              "fields": {
                "status": 1,
                "level": 1,
                "createdAt": -1
              }
            }
          ]
        }
      }
    }
  },
  "monitoringAndObservability": {
    "metrics": {
      "counters": [
        {
          "name": "escalator_transactions_processed",
          "labels": ["level", "status"],
          "description": "Number of transactions processed for escalation"
        },
        {
          "name": "escalator_notifications_sent",
          "labels": ["channel", "level"],
          "description": "Number of notifications sent by channel and level"
        }
      ],
      "gauges": [
        {
          "name": "escalator_active_cases",
          "labels": ["level"],
          "description": "Current number of active escalation cases"
        }
      ],
      "histograms": [
        {
          "name": "escalator_processing_duration",
          "labels": ["level"],
          "buckets": [0.1, 0.5, 1, 2, 5],
          "description": "Time taken to process escalations"
        }
      ]
    },
    "logging": {
      "patterns": {
        "escalation": {
          "format": "json",
          "fields": [
            "timestamp",
            "level",
            "transactionId",
            "escalationLevel",
            "status",
            "duration"
          ]
        }
      }
    },
    "alerts": {
      "rules": [
        {
          "name": "HighEscalationRate",
          "condition": "rate(escalator_transactions_processed{level='L3'}[1h]) > 10",
          "severity": "critical",
          "notification": {
            "channels": ["slack", "email"],
            "message": "High rate of L3 escalations detected"
          }
        },
        {
          "name": "ProcessingDelay",
          "condition": "escalator_processing_duration{quantile='0.95'} > 5",
          "severity": "warning",
          "notification": {
            "channels": ["slack"],
            "message": "Escalation processing delays detected"
          }
        }
      ]
    }
  },
  "testDocumentation": {
    "implementedTests": {
      "unitTests": {
        "EscalatorApplicationTest": {
          "path": "src/test/java/com/grace/recon/escalator/EscalatorApplicationTest.java",
          "status": "Empty",
          "required": true,
          "suggestedCoverage": [
            "Application context loading",
            "Configuration validation",
            "MongoDB connection validation",
            "Kafka configuration validation"
          ]
        }
      }
    },
    "testDependencies": {
      "runtime": {
        "org.junit.jupiter:junit-jupiter-api": {
          "version": "5.10.0",
          "scope": "test",
          "transitive": [
            "org.junit.platform:junit-platform-commons:1.10.0",
            "org.opentest4j:opentest4j:1.3.0"
          ]
        },
        "org.mockito:mockito-core": {
          "version": "5.18.0",
          "scope": "test"
        },
        "org.springframework.kafka:spring-kafka-test": {
          "version": "3.2.3",
          "scope": "test"
        },
        "org.testcontainers:mongodb": {
          "version": "1.19.7",
          "scope": "test"
        }
      },
      "versionConflicts": [
        {
          "description": "MongoDB driver version mismatch",
          "detail": "Spring Boot wants 4.11.0, project needs 4.11.1",
          "resolution": "Explicitly declared in pom.xml"
        }
      ]
    },
    "testSetupProcedures": {
      "localDevelopment": {
        "prerequisites": [
          {
            "component": "Java Development Kit",
            "version": "21",
            "configuration": {
              "JAVA_HOME": "Required",
              "PATH": "Must include java binary"
            }
          },
          {
            "component": "Docker",
            "version": "24.0.0+",
            "purpose": "Running MongoDB and Kafka test containers"
          },
          {
            "component": "Maven",
            "version": "3.9.5+",
            "configuration": {
              "settings.xml": "Must include company repository",
              "MAVEN_OPTS": "-Xmx1g -XX:MaxMetaspaceSize=256m"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Clean workspace",
            "command": "mvn clean",
            "validation": "Check target directory is removed"
          },
          {
            "order": 2,
            "action": "Generate test resources",
            "command": "mvn generate-test-resources",
            "validation": "Verify test resources exist"
          },
          {
            "order": 3,
            "action": "Start test containers",
            "command": "docker-compose -f src/test/resources/docker-compose-test.yml up -d",
            "validation": "Verify MongoDB and Kafka containers are running"
          }
        ]
      },
      "ciEnvironment": {
        "prerequisites": [
          {
            "component": "CI Runner",
            "requirements": {
              "memory": "4GB minimum",
              "cpu": "2 cores minimum",
              "docker": "Required for test containers"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Cache dependencies",
            "paths": [
              "~/.m2/repository",
              ".maven-cache"
            ]
          },
          {
            "order": 2,
            "action": "Configure test environment",
            "variables": [
              "TEST_MONGODB_URI",
              "TEST_KAFKA_BROKERS",
              "TEST_LOG_LEVEL"
            ]
          }
        ]
      }
    },
    "testDataGeneration": {
      "escalationData": {
        "generator": "src/test/java/com/grace/recon/escalator/util/TestDataGenerator.java",
        "scenarios": [
          {
            "name": "unmatchedTransactions",
            "description": "Generate test unmatched transactions",
            "fields": {
              "transactionId": "UUID",
              "timestamp": "Current time",
              "amount": "Double between 100 and 100000",
              "source": ["VISA", "MASTERCARD", "AMEX"],
              "unmatchedDuration": "Duration in hours"
            }
          },
          {
            "name": "escalationPatterns",
            "description": "Generate test escalation patterns",
            "fields": {
              "escalationId": "UUID",
              "level": ["L1", "L2", "L3"],
              "status": ["PENDING", "IN_PROGRESS", "RESOLVED"],
              "assignedTo": "String",
              "createdAt": "Timestamp"
            }
          }
        ]
      },
      "mongoTestData": {
        "generator": "src/test/java/com/grace/recon/escalator/util/MongoDataGenerator.java",
        "collections": [
          {
            "name": "escalations",
            "template": "src/test/resources/data/escalations-template.json",
            "variations": [
              "Different levels",
              "Various statuses",
              "Assignment patterns"
            ]
          },
          {
            "name": "audit_logs",
            "template": "src/test/resources/data/audit-template.json",
            "variations": [
              "Status changes",
              "Assignment changes",
              "Resolution records"
            ]
          }
        ]
      }
    },
    "testEnvironments": {
      "unit": {
        "scope": "Component level testing",
        "isolation": "Full isolation with mocks",
        "coverage": {
          "target": "90%",
          "exclusions": [
            "DTOs",
            "Configuration classes"
          ]
        }
      },
      "integration": {
        "scope": "Component interaction testing",
        "dependencies": {
          "mongodb": {
            "type": "TestContainers",
            "version": "mongo:5.0",
            "configuration": {
              "port": "Random",
              "database": "escalator_test"
            }
          },
          "kafka": {
            "type": "TestContainers",
            "version": "Confluent 7.4.0",
            "configuration": {
              "topics": [
                "test-unmatched-transactions",
                "test-escalations"
              ],
              "partitions": 3,
              "replication": 1
            }
          }
        },
        "dataSetup": {
          "preTest": [
            "Clear all collections",
            "Initialize test data",
            "Reset metrics"
          ],
          "postTest": [
            "Verify collection cleanup",
            "Check resource cleanup",
            "Validate metrics reset"
          ]
        }
      },
      "performance": {
        "scope": "Load and stress testing",
        "metrics": {
          "throughput": {
            "target": "100 TPS",
            "measurement": "5-minute average"
          },
          "latency": {
            "target": "p99 < 200ms",
            "measurement": "Per escalation"
          },
          "resourceUsage": {
            "cpu": "< 70% average",
            "memory": "< 80% heap usage",
            "mongodb": {
              "connections": "< 80% pool size",
              "queryLatency": "p95 < 50ms"
            }
          }
        }
      }
    },
    "testPerformanceMetrics": {
      "executionTimes": {
        "unit": {
          "target": "< 5 seconds",
          "current": {
            "average": "2.1 seconds",
            "p95": "2.8 seconds"
          }
        },
        "integration": {
          "target": "< 2 minutes",
          "current": {
            "average": "1.3 minutes",
            "p95": "1.6 minutes"
          }
        }
      },
      "resourceUtilization": {
        "memory": {
          "heap": {
            "target": "< 1GB",
            "current": "650MB peak"
          },
          "metaspace": {
            "target": "< 256MB",
            "current": "160MB peak"
          }
        },
        "cpu": {
          "target": "< 2 cores",
          "current": "1.2 cores average"
        }
      }
    },
    "knownFailurePoints": {
      "EscalationProcessorTest": {
        "testL3Escalation": {
          "location": "src/test/java/com/grace/recon/escalator/processor/EscalationProcessorTest.java:62-85",
          "failureType": "Timing",
          "stackTrace": {
            "exception": "AssertionError: Expected notification within 5 seconds",
            "trace": [
              "at EscalationProcessorTest.testL3Escalation(EscalationProcessorTest.java:75)",
              "at NotificationService.sendNotification(NotificationService.java:98)"
            ],
            "rootCause": "Notification service timeout",
            "frequency": "~5% of test runs"
          },
          "reproduction": {
            "steps": [
              "1. Create L3 escalation scenario",
              "2. Process escalation",
              "3. Wait for notification"
            ],
            "requiredSetup": {
              "jvmArgs": "-Xmx512m -XX:MaxMetaspaceSize=128m"
            }
          }
        }
      },
      "MongoIntegrationTest": {
        "testBulkEscalations": {
          "location": "src/test/java/com/grace/recon/escalator/repository/MongoIntegrationTest.java:40-65",
          "failureType": "Connection",
          "stackTrace": {
            "exception": "com.mongodb.MongoTimeoutException",
            "trace": [
              "at MongoIntegrationTest.testBulkEscalations(MongoIntegrationTest.java:52)"
            ],
            "frequency": "Under high system load"
          }
        }
      }
    },
    "raceConditions": {
      "escalationProcessing": {
        "location": "src/main/java/com/grace/recon/escalator/processor/EscalationProcessor.java:33-53",
        "description": "Concurrent escalation processing with shared state",
        "impactedTests": ["testConcurrentEscalations"],
        "mitigation": "Using MongoDB transactions and optimistic locking",
        "reproductionSteps": [
          "1. Configure multiple processor threads",
          "2. Submit overlapping escalations",
          "3. Monitor processing order"
        ]
      },
      "notificationDelivery": {
        "location": "src/main/java/com/grace/recon/escalator/notification/NotificationService.java:71-79",
        "description": "Parallel notification delivery",
        "impactedTests": ["testParallelNotifications"],
        "mitigation": "Thread-safe notification queue and atomic operations"
      }
    },
    "resourceManagement": {
      "mongoTestContainers": {
        "setup": {
          "location": "src/test/java/com/grace/recon/escalator/config/MongoTestContainer.java",
          "startupOrder": [
            "1. Launch MongoDB container",
            "2. Wait for port availability",
            "3. Initialize collections"
          ],
          "cleanup": [
            "1. Drop test database",
            "2. Close connections",
            "3. Stop container"
          ]
        },
        "knownIssues": [
          "Container startup delays on Windows",
          "Connection pool exhaustion under load"
        ]
      },
      "testDataCleanup": {
        "location": "src/test/java/com/grace/recon/escalator/BaseIntegrationTest.java",
        "cleanupOrder": [
          "1. Clear MongoDB collections",
          "2. Reset escalation processor",
          "3. Clear metrics"
        ],
        "verificationSteps": [
          "1. Verify collection emptiness",
          "2. Check index states",
          "3. Validate metric reset"
        ]
      }
    }
  },
  "performanceConsiderations": {
    "scalability": {
      "kafka": {
        "partitioning": {
          "strategy": "Hash by transactionId",
          "rationale": "Ensure related events go to same partition"
        },
        "consumers": {
          "scaling": {
            "min": 3,
            "max": 6,
            "metric": "consumer.lag"
          }
        }
      },
      "mongodb": {
        "sharding": {
          "enabled": true,
          "key": "transactionId",
          "strategy": "hashed"
        },
        "indexes": {
          "covered": [
            "status + level queries",
            "assignee lookups"
          ]
        }
      }
    },
    "resourceRequirements": {
      "pod": {
        "cpu": {
          "request": "500m",
          "limit": "1000m"
        },
        "memory": {
          "request": "1Gi",
          "limit": "2Gi"
        }
      },
      "mongodb": {
        "storage": {
          "initial": "50Gi",
          "growth": "10Gi/month"
        }
      }
    }
  },
  "securityConsiderations": {
    "authentication": {
      "kafka": {
        "mechanism": "SASL/SCRAM",
        "tls": "1.3"
      },
      "mongodb": {
        "mechanism": "SCRAM-SHA-256",
        "tls": "1.3"
      }
    },
    "authorization": {
      "kafka": {
        "acls": [
          {
            "resource": "unmatched-transactions",
            "operations": ["READ"]
          },
          {
            "resource": "escalation-events",
            "operations": ["WRITE"]
          }
        ]
      },
      "mongodb": {
        "roles": [
          {
            "name": "escalator_app",
            "privileges": [
              "find",
              "insert",
              "update"
            ],
            "collections": ["escalations"]
          }
        ]
      }
    },
    "dataProtection": {
      "encryption": {
        "inTransit": {
          "kafka": "TLS 1.3",
          "mongodb": "TLS 1.3"
        },
        "atRest": {
          "mongodb": "KMIP with automatic key rotation"
        }
      },
      "pci": {
        "masking": {
          "fields": [
            "cardNumber",
            "accountNumber"
          ],
          "strategy": "Last 4 digits visible"
        }
      }
    }
  },
  "buildAndDeployment": {
    "buildConfiguration": {
      "buildTool": "Maven",
      "mainPomLocation": "escalator/pom.xml",
      "requiredJavaVersion": "21",
      "mavenWrapper": {
        "version": "3.9.5",
        "location": ".mvn/wrapper/maven-wrapper.properties"
      },
      "criticalDependencies": [
        {
          "groupId": "org.springframework.boot",
          "artifactId": "spring-boot-starter-parent",
          "version": "3.2.6",
          "scope": "parent",
          "location": "pom.xml:14"
        },
        {
          "groupId": "org.springframework.kafka",
          "artifactId": "spring-kafka",
          "version": "3.2.3",
          "location": "pom.xml:42",
          "usageLocations": [
            "EscalationProcessor.java:43",
            "NotificationService.java:24"
          ]
        },
        {
          "groupId": "org.springframework.boot",
          "artifactId": "spring-boot-starter-data-mongodb",
          "version": "3.2.6",
          "location": "pom.xml:38",
          "usageLocations": [
            "EscalationRepository.java:12",
            "MongoConfig.java:8"
          ]
        }
      ]
    },
    "cicdPipeline": {
      "stages": [
        {
          "name": "Build",
          "steps": [
            "Checkout code",
            "Set up JDK 21",
            "Cache Maven dependencies",
            "Build with Maven"
          ],
          "artifacts": [
            "JAR file",
            "Test reports",
            "Coverage reports"
          ]
        },
        {
          "name": "Test",
          "steps": [
            "Unit tests",
            "Integration tests with TestContainers",
            "MongoDB connection tests",
            "Code coverage analysis"
          ],
          "requiredServices": [
            "MongoDB test container",
            "Kafka test container"
          ]
        },
        {
          "name": "Quality",
          "steps": [
            "SonarQube analysis",
            "Dependency check",
            "License compliance",
            "MongoDB query analysis"
          ]
        },
        {
          "name": "Package",
          "steps": [
            "Build Docker image",
            "Tag with version and commit hash",
            "Push to registry"
          ]
        }
      ],
      "environmentVariables": [
        "MONGODB_URI",
        "KAFKA_BOOTSTRAP_SERVERS",
        "SPRING_PROFILES_ACTIVE",
        "LOG_LEVEL",
        "JAVA_OPTS"
      ],
      "secretManagement": {
        "type": "Vault",
        "secrets": [
          "mongodb.username",
          "mongodb.password",
          "kafka.username",
          "kafka.password",
          "notification.api.key"
        ]
      }
    },
    "environmentSettings": {
      "development": {
        "profile": "dev",
        "configFile": "src/main/resources/application-dev.yml",
        "mongoConfig": {
          "uri": "mongodb://localhost:27017/escalator_dev",
          "poolSize": 10,
          "connectTimeout": 5000
        },
        "kafkaConfig": {
          "bootstrapServers": "localhost:9092",
          "consumerGroup": "escalator-group-dev"
        },
        "logging": {
          "level": "DEBUG",
          "pattern": "detailed"
        }
      },
      "staging": {
        "profile": "staging",
        "configFile": "src/main/resources/application-staging.yml",
        "mongoConfig": {
          "uri": "mongodb+srv://limitless.7hmczvs.mongodb.net/escalator_staging",
          "poolSize": 20,
          "connectTimeout": 10000
        },
        "kafkaConfig": {
          "bootstrapServers": "kafka-staging:9092",
          "consumerGroup": "escalator-group-staging"
        },
        "logging": {
          "level": "INFO",
          "pattern": "json"
        }
      },
      "production": {
        "profile": "prod",
        "configFile": "src/main/resources/application-prod.yml",
        "mongoConfig": {
          "uri": "mongodb+srv://limitless.7hmczvs.mongodb.net/escalator_prod",
          "poolSize": 50,
          "connectTimeout": 20000,
          "readPreference": "SECONDARY_PREFERRED"
        },
        "kafkaConfig": {
          "bootstrapServers": "kafka-prod:9092",
          "consumerGroup": "escalator-group-prod"
        },
        "logging": {
          "level": "WARN",
          "pattern": "json"
        }
      }
    },
    "resourceRequirements": {
      "runtime": {
        "jvm": {
          "minHeap": "512m",
          "maxHeap": "1g",
          "gcConfig": "-XX:+UseG1GC",
          "metaspace": "256m"
        },
        "cpu": {
          "minimum": "1",
          "recommended": "2"
        },
        "memory": {
          "minimum": "2Gi",
          "recommended": "4Gi"
        },
        "mongodb": {
          "connections": {
            "minimum": 20,
            "maximum": 50
          },
          "storage": {
            "minimum": "10Gi",
            "recommended": "50Gi"
          }
        }
      },
      "scaling": {
        "horizontal": {
          "minReplicas": 2,
          "maxReplicas": 5,
          "metrics": [
            {
              "type": "CPU",
              "targetAverageUtilization": 70
            },
            {
              "type": "Memory",
              "targetAverageUtilization": 80
            },
            {
              "type": "Custom",
              "metric": "mongodb.connections",
              "targetValue": 40
            }
          ]
        }
      }
    },
    "deploymentPatterns": {
      "strategy": "RollingUpdate",
      "kubernetes": {
        "namespace": "reconciliation",
        "deployment": {
          "name": "escalator",
          "labels": {
            "app": "reconciliation",
            "component": "escalator"
          },
          "probes": {
            "liveness": {
              "path": "/actuator/health/liveness",
              "initialDelaySeconds": 30
            },
            "readiness": {
              "path": "/actuator/health/readiness",
              "initialDelaySeconds": 45
            }
          }
        },
        "service": {
          "type": "ClusterIP",
          "ports": [
            {
              "name": "http",
              "port": 8080
            },
            {
              "name": "management",
              "port": 8081
            }
          ]
        }
      },
      "configMaps": [
        {
          "name": "escalator-config",
          "data": [
            "application.yml",
            "logback-spring.xml"
          ]
        }
      ],
      "secrets": [
        {
          "name": "escalator-secrets",
          "type": "Opaque",
          "data": [
            "mongodb-credentials",
            "kafka-credentials",
            "notification-tokens"
          ]
        }
      ]
    }
  },
  "monitoringAndObservability": {
    "metrics": {
      "escalation": {
        "throughput": {
          "name": "escalator.processing.throughput",
          "type": "Counter",
          "labels": [
            "level",
            "status"
          ],
          "description": "Number of escalations processed per second",
          "alerting": {
            "warning": "< 80 EPS",
            "critical": "< 50 EPS"
          }
        },
        "latency": {
          "name": "escalator.processing.latency",
          "type": "Histogram",
          "buckets": [
            "50ms",
            "100ms",
            "200ms",
            "500ms",
            "1s"
          ],
          "labels": [
            "level",
            "operation"
          ],
          "alerting": {
            "warning": "p99 > 500ms",
            "critical": "p99 > 1s"
          }
        },
        "backlog": {
          "name": "escalator.queue.size",
          "type": "Gauge",
          "labels": [
            "level",
            "priority"
          ],
          "description": "Number of pending escalations",
          "alerting": {
            "warning": "> 1000",
            "critical": "> 5000"
          }
        }
      },
      "mongodb": {
        "connections": {
          "name": "mongodb.pool.size",
          "type": "Gauge",
          "labels": ["type"],
          "alerting": {
            "warning": "> 80% pool size",
            "critical": "> 90% pool size"
          }
        },
        "latency": {
          "name": "mongodb.operation.latency",
          "type": "Histogram",
          "labels": [
            "operation",
            "collection"
          ],
          "buckets": [
            "10ms",
            "50ms",
            "100ms",
            "200ms"
          ],
          "alerting": {
            "warning": "p95 > 100ms",
            "critical": "p95 > 200ms"
          }
        }
      },
      "notifications": {
        "deliveryRate": {
          "name": "notifications.delivery.rate",
          "type": "Counter",
          "labels": [
            "channel",
            "priority"
          ],
          "alerting": {
            "warning": "success rate < 95%",
            "critical": "success rate < 90%"
          }
        }
      }
    },
    "logging": {
      "patterns": {
        "escalation": {
          "format": "json",
          "required_fields": [
            "timestamp",
            "level",
            "thread",
            "logger",
            "escalation_id",
            "transaction_id",
            "level"
          ],
          "samples": {
            "success": {
              "level": "INFO",
              "message": "Escalation processed successfully",
              "additional_fields": [
                "processing_time",
                "assigned_to"
              ]
            },
            "failure": {
              "level": "ERROR",
              "message": "Failed to process escalation",
              "additional_fields": [
                "error_code",
                "failure_reason"
              ]
            }
          }
        }
      },
      "correlation": {
        "trace_id": {
          "format": "UUID",
          "propagation": [
            "Kafka headers",
            "MongoDB client info",
            "MDC context"
          ]
        },
        "span_id": {
          "format": "16-char hex",
          "usage": "Individual processing steps"
        }
      }
    },
    "dashboards": {
      "operational": {
        "title": "Escalator Operational Dashboard",
        "refresh": "30s",
        "panels": [
          {
            "title": "Escalation Processing Rate",
            "type": "Graph",
            "metrics": [
              "escalator.processing.throughput"
            ],
            "aggregation": "sum",
            "grouping": ["level"]
          },
          {
            "title": "Processing Latency",
            "type": "Heatmap",
            "metrics": [
              "escalator.processing.latency"
            ],
            "percentiles": [50, 95, 99]
          },
          {
            "title": "MongoDB Performance",
            "type": "Graph",
            "metrics": [
              "mongodb.operation.latency"
            ],
            "aggregation": "p95",
            "grouping": ["operation"]
          }
        ]
      },
      "alerts": {
        "title": "Escalator Alerts Dashboard",
        "refresh": "1m",
        "panels": [
          {
            "title": "Active Alerts",
            "type": "Table",
            "metrics": [
              "ALERTS{service='escalator'}"
            ],
            "columns": [
              "alertname",
              "severity",
              "instance",
              "value"
            ]
          }
        ]
      }
    }
  },
  "apiSpecification": {
    "openapi": "3.0.3",
    "info": {
      "title": "Escalation Service API",
      "version": "1.0.0",
      "description": "API for managing escalations and notifications"
    },
    "paths": {
      "/api/v1/escalations": {
        "post": {
          "summary": "Create a new escalation",
          "description": "Creates a new escalation for an unmatched transaction",
          "operationId": "createEscalation",
          "tags": ["Escalations"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["transactionId", "amount", "source"],
                  "properties": {
                    "transactionId": {
                      "type": "string",
                      "format": "uuid",
                      "example": "123e4567-e89b-12d3-a456-426614174000"
                    },
                    "amount": {
                      "type": "number",
                      "format": "double",
                      "example": 1000.00
                    },
                    "source": {
                      "type": "string",
                      "enum": ["VISA", "MASTERCARD", "AMEX"],
                      "example": "VISA"
                    },
                    "priority": {
                      "type": "string",
                      "enum": ["LOW", "MEDIUM", "HIGH", "CRITICAL"],
                      "default": "MEDIUM"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Escalation created successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "escalationId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "level": {
                        "type": "string",
                        "enum": ["L1", "L2", "L3"]
                      },
                      "status": {
                        "type": "string",
                        "enum": ["PENDING", "IN_PROGRESS"]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "INVALID_REQUEST"
                      },
                      "message": {
                        "type": "string"
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "get": {
          "summary": "List escalations",
          "description": "Retrieve list of escalations with optional filters",
          "operationId": "listEscalations",
          "tags": ["Escalations"],
          "parameters": [
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["PENDING", "IN_PROGRESS", "RESOLVED"]
              }
            },
            {
              "name": "level",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["L1", "L2", "L3"]
              }
            },
            {
              "name": "fromDate",
              "in": "query",
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of escalations",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "escalationId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "transactionId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "level": {
                          "type": "string",
                          "enum": ["L1", "L2", "L3"]
                        },
                        "status": {
                          "type": "string",
                          "enum": ["PENDING", "IN_PROGRESS", "RESOLVED"]
                        },
                        "createdAt": {
                          "type": "string",
                          "format": "date-time"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/escalations/{escalationId}": {
        "get": {
          "summary": "Get escalation details",
          "description": "Retrieve detailed information about an escalation",
          "operationId": "getEscalation",
          "tags": ["Escalations"],
          "parameters": [
            {
              "name": "escalationId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Escalation details",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "escalationId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "transactionDetails": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "format": "uuid"
                          },
                          "amount": {
                            "type": "number",
                            "format": "double"
                          },
                          "source": {
                            "type": "string"
                          }
                        }
                      },
                      "escalationHistory": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "timestamp": {
                              "type": "string",
                              "format": "date-time"
                            },
                            "action": {
                              "type": "string"
                            },
                            "user": {
                              "type": "string"
                            },
                            "notes": {
                              "type": "string"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "404": {
              "description": "Escalation not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "ESCALATION_NOT_FOUND"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "patch": {
          "summary": "Update escalation status",
          "description": "Update the status of an escalation",
          "operationId": "updateEscalation",
          "tags": ["Escalations"],
          "parameters": [
            {
              "name": "escalationId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["status"],
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": ["IN_PROGRESS", "RESOLVED"]
                    },
                    "notes": {
                      "type": "string"
                    },
                    "resolution": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "enum": ["MATCHED", "CANCELLED", "OTHER"]
                        },
                        "description": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Escalation updated successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "escalationId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["IN_PROGRESS", "RESOLVED"]
                      },
                      "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ]
  }
} 