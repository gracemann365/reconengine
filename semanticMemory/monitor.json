{
  "documentInfo": {
    "lastUpdated": "2024-03-21",
    "status": "Planning Phase",
    "friendlyNotice": "üëã Welcome! This document is a blueprint for our monitoring service. Most features described here are planned for future implementation. We'll guide you through what exists now and what we're building toward."
  },

  "currentImplementationStatus": {
    "overview": "üöß This service is in initial setup phase",
    "whatExists": {
      "notice": "‚úÖ Here's what's actually implemented right now:",
      "files": [
        {
          "path": "pom.xml",
          "status": "Implemented",
          "description": "Basic Spring Boot project setup with core dependencies"
        },
        {
          "path": "MonitorApplication.java",
          "status": "Empty",
          "description": "Main application class - needs implementation"
        },
        {
          "path": "MonitorApplicationTest.java",
          "status": "Empty",
          "description": "Test class - needs implementation"
        }
      ],
      "dependencies": {
        "notice": "Currently configured in pom.xml:",
        "list": [
          "spring-boot-starter",
          "common module",
          "lombok",
          "test dependencies (JUnit, Mockito)"
        ]
      }
    },
    "nextSteps": {
      "notice": "üéØ Immediate next steps:",
      "steps": [
        "Implement basic MonitorApplication.java",
        "Set up initial metrics collection",
        "Add basic health checks"
      ]
    }
  },

  "moduleName": "monitor",
  "description": "Monitor Microservice for the Reconciliation Engine - Provides real-time monitoring, alerting, and health checks for all reconciliation services",
  "version": "1.0.0-SNAPSHOT",
  "type": "Spring Boot Service",
  "groupId": "com.grace.recon",
  "artifactId": "monitor",
  "dependencyVersions": {
    "implementationStatus": "‚úÖ Versions defined in parent pom.xml",
    "java": {
      "version": "21",
      "source": "${java.version} from parent pom"
    },
    "springBoot": {
      "version": "3.2.6",
      "source": "${spring-boot.version} from parent pom"
    },
    "springActuator": {
      "version": "3.2.6",
      "source": "spring-boot-starter-actuator dependency"
    },
    "springKafka": {
      "version": "3.2.3",
      "source": "Defined in parent pom dependencyManagement"
    },
    "prometheus": {
      "version": "1.13.1",
      "source": "micrometer-registry-prometheus dependency"
    },
    "grafana": {
      "version": "10.4.0",
      "source": "External dashboard integration",
      "configuration": {
        "datasources": ["Prometheus", "Loki", "Tempo"],
        "dashboardProvider": "Kubernetes ConfigMap"
      }
    },
    "loki": {
      "version": "2.9.5",
      "source": "External log aggregation",
      "configuration": {
        "retentionPeriod": "30d",
        "chunkSize": "512KB",
        "compression": "snappy"
      }
    },
    "tempo": {
      "version": "2.4.0",
      "source": "External tracing backend",
      "configuration": {
        "retentionPeriod": "7d",
        "backend": "S3",
        "sampling": {
          "rate": 0.1,
          "rules": [
            {
              "service": "matcher",
              "rate": 0.5
            },
            {
              "service": "escalator",
              "rate": 0.3
            }
          ]
        }
      }
    },
    "lombok": {
      "version": "1.18.30",
      "source": "Defined in parent pom dependencyManagement"
    },
    "testFrameworks": {
      "junit": {
        "version": "5.10.0",
        "source": "${junit-jupiter.version} from parent pom"
      },
      "mockito": {
        "version": "5.18.0",
        "source": "${mockito.version} from parent pom"
      }
    }
  },
  "plannedComponents": {
    "notice": "üöß PLANNED FEATURES - Not yet implemented",
    "readinessStatus": "In Planning Phase",
    "MonitorApplication": {
      "implementationStatus": "Not Started",
      "description": "Main Spring Boot application class for the monitoring service",
      "sourceLocation": {
        "path": "src/main/java/com/grace/recon/monitor/MonitorApplication.java",
        "status": "Empty file - needs implementation",
        "priority": "High - Required for service startup"
      }
    },
    "suggestedComponents": {
      "notice": "üìù These are planned components - none are implemented yet",
      "MetricsCollector": {
        "description": "Core component for collecting and aggregating metrics from all services",
        "suggestedPath": "src/main/java/com/grace/recon/monitor/metrics/MetricsCollector.java",
        "responsibilities": [
          "Collect metrics from all reconciliation services",
          "Aggregate metrics for reporting",
          "Forward metrics to Prometheus"
        ],
        "requiredMethods": [
          {
            "signature": "collectServiceMetrics(String serviceName, MetricBatch metrics)",
            "purpose": "Process incoming metrics from services",
            "suggestedImplementation": {
              "steps": [
                "Validate metric format",
                "Enrich with service metadata",
                "Apply aggregation rules",
                "Forward to time-series database"
              ]
            }
          },
          {
            "signature": "aggregateMetrics(String metricName, Duration window)",
            "purpose": "Aggregate metrics over time windows",
            "logic": {
              "aggregations": [
                "Count",
                "Sum",
                "Average",
                "Percentiles (p50, p90, p99)"
              ],
              "windows": [
                "1 minute",
                "5 minutes",
                "1 hour",
                "1 day"
              ]
            }
          }
        ]
      },
      "HealthCheckManager": {
        "description": "Manages health checks for all reconciliation services",
        "suggestedPath": "src/main/java/com/grace/recon/monitor/health/HealthCheckManager.java",
        "components": {
          "ServiceHealthChecker": {
            "description": "Performs health checks on individual services",
            "checks": [
              {
                "name": "Liveness",
                "endpoint": "/actuator/health/liveness",
                "interval": "30s",
                "timeout": "5s"
              },
              {
                "name": "Readiness",
                "endpoint": "/actuator/health/readiness",
                "interval": "1m",
                "timeout": "5s"
              },
              {
                "name": "Dependencies",
                "checks": [
                  "Kafka connectivity",
                  "MongoDB availability",
                  "External API health"
                ],
                "interval": "1m"
              }
            ]
          },
          "HealthAggregator": {
            "description": "Aggregates health status across services",
            "rules": [
              {
                "condition": "Any service unhealthy",
                "status": "DOWN",
                "priority": "HIGH"
              },
              {
                "condition": "All services healthy, some warnings",
                "status": "DEGRADED",
                "priority": "MEDIUM"
              },
              {
                "condition": "All services fully healthy",
                "status": "UP",
                "priority": "LOW"
              }
            ]
          }
        }
      },
      "AlertManager": {
        "description": "Manages alert rules and notifications",
        "suggestedPath": "src/main/java/com/grace/recon/monitor/alert/AlertManager.java",
        "features": {
          "ruleEngine": {
            "description": "Evaluates metrics against alert rules",
            "ruleTypes": [
              {
                "type": "Threshold",
                "parameters": ["metric", "operator", "threshold", "duration"]
              },
              {
                "type": "Trend",
                "parameters": ["metric", "changeRate", "window"]
              },
              {
                "type": "Anomaly",
                "parameters": ["metric", "algorithm", "sensitivity"]
              }
            ]
          },
          "notificationManager": {
            "description": "Handles alert notifications",
            "channels": {
              "email": {
                "templates": [
                  {
                    "name": "CRITICAL_ALERT",
                    "subject": "CRITICAL: {{alertName}} - {{serviceName}}",
                    "recipients": ["sre-team@company.com"]
                  },
                  {
                    "name": "WARNING_ALERT",
                    "subject": "Warning: {{alertName}} - {{serviceName}}",
                    "recipients": ["dev-team@company.com"]
                  }
                ]
              },
              "slack": {
                "channels": {
                  "critical": "#recon-alerts-critical",
                  "warning": "#recon-alerts-warning",
                  "info": "#recon-alerts-info"
                }
              },
              "pagerDuty": {
                "integrationKey": "{{PAGERDUTY_KEY}}",
                "severityMapping": {
                  "CRITICAL": "P1",
                  "WARNING": "P2",
                  "INFO": "P3"
                }
              }
            }
          }
        }
      },
      "LogAggregator": {
        "description": "Aggregates and processes logs from all services",
        "suggestedPath": "src/main/java/com/grace/recon/monitor/logging/LogAggregator.java",
        "features": {
          "logProcessing": {
            "parsers": [
              {
                "format": "JSON",
                "fields": [
                  "timestamp",
                  "level",
                  "service",
                  "traceId",
                  "message"
                ]
              },
              {
                "format": "Logback",
                "pattern": "%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n"
              }
            ],
            "enrichment": [
              "Kubernetes metadata",
              "Service correlations",
              "Business context"
            ]
          },
          "retention": {
            "policies": [
              {
                "level": "ERROR",
                "retention": "90 days"
              },
              {
                "level": "WARN",
                "retention": "30 days"
              },
              {
                "level": "INFO",
                "retention": "7 days"
              }
            ]
          }
        }
      }
    }
  },
  "plannedMonitoringAndObservability": {
    "notice": "üéØ PLANNED FEATURES - This entire section describes future functionality",
    "implementationStatus": "In Planning Phase",
    "metrics": {
      "serviceHealth": {
        "availability": {
          "name": "service.health.status",
          "type": "Gauge",
          "labels": ["service", "instance", "check_type"],
          "description": "Health status of services (0=down, 1=degraded, 2=healthy)",
          "alerting": {
            "critical": "value == 0 for 5m",
            "warning": "value == 1 for 15m"
          }
        },
        "responseTime": {
          "name": "service.health.response_time",
          "type": "Histogram",
          "labels": ["service", "instance", "endpoint"],
          "buckets": ["0.1", "0.5", "1", "2", "5"],
          "alerting": {
            "warning": "p95 > 2s",
            "critical": "p99 > 5s"
          }
        }
      },
      "systemMetrics": {
        "cpu": {
          "name": "system.cpu.usage",
          "type": "Gauge",
          "labels": ["service", "instance"],
          "alerting": {
            "warning": "> 80% for 5m",
            "critical": "> 90% for 5m"
          }
        },
        "memory": {
          "name": "system.memory.usage",
          "type": "Gauge",
          "labels": ["service", "instance", "type"],
          "alerting": {
            "warning": "> 80% for 5m",
            "critical": "> 90% for 5m"
          }
        },
        "disk": {
          "name": "system.disk.usage",
          "type": "Gauge",
          "labels": ["service", "instance", "mount"],
          "alerting": {
            "warning": "> 80%",
            "critical": "> 90%"
          }
        }
      },
      "businessMetrics": {
        "reconciliationRate": {
          "name": "business.reconciliation.rate",
          "type": "Counter",
          "labels": ["service", "type", "status"],
          "alerting": {
            "warning": "rate(5m) < 100",
            "critical": "rate(15m) < 50"
          }
        },
        "matchingAccuracy": {
          "name": "business.matching.accuracy",
          "type": "Gauge",
          "labels": ["service", "type"],
          "alerting": {
            "warning": "< 95%",
            "critical": "< 90%"
          }
        },
        "processingLatency": {
          "name": "business.processing.latency",
          "type": "Histogram",
          "labels": ["service", "operation"],
          "buckets": ["0.1", "0.5", "1", "2", "5", "10"],
          "alerting": {
            "warning": "p95 > 5s",
            "critical": "p99 > 10s"
          }
        }
      }
    },
    "logging": {
      "configuration": {
        "aggregator": "Loki",
        "format": "JSON",
        "minimumLevel": "INFO",
        "retention": {
          "hot": "7d",
          "warm": "30d",
          "cold": "90d"
        }
      },
      "patterns": {
        "service": {
          "format": "json",
          "required_fields": [
            "timestamp",
            "level",
            "service",
            "instance",
            "traceId",
            "message"
          ]
        },
        "audit": {
          "format": "json",
          "required_fields": [
            "timestamp",
            "level",
            "service",
            "user",
            "action",
            "resource",
            "outcome"
          ]
        },
        "metrics": {
          "format": "json",
          "required_fields": [
            "timestamp",
            "service",
            "metric",
            "value",
            "labels"
          ]
        }
      },
      "enrichment": {
        "kubernetes": [
          "namespace",
          "pod",
          "node",
          "container"
        ],
        "application": [
          "version",
          "environment",
          "region"
        ],
        "business": [
          "tenant",
          "feature_flags",
          "processing_mode"
        ]
      }
    },
    "tracing": {
      "configuration": {
        "sampler": {
          "type": "RateLimiting",
          "rate": 100
        },
        "exporters": [
          {
            "type": "Tempo",
            "endpoint": "http://tempo:4317",
            "format": "OTLP/gRPC"
          }
        ]
      },
      "spans": {
        "naming": {
          "pattern": "{service}.{operation}.{status}",
          "examples": [
            "matcher.process_transaction.success",
            "escalator.create_case.failure"
          ]
        },
        "attributes": {
          "required": [
            "service.name",
            "service.version",
            "deployment.environment"
          ],
          "recommended": [
            "http.method",
            "http.url",
            "http.status_code",
            "db.system",
            "db.operation"
          ]
        }
      }
    },
    "dashboards": {
      "service": {
        "title": "Service Health Overview",
        "refresh": "30s",
        "panels": [
          {
            "title": "Service Health Status",
            "type": "Status Grid",
            "metrics": [
              "service.health.status"
            ],
            "thresholds": {
              "ok": 2,
              "warning": 1,
              "critical": 0
            }
          },
          {
            "title": "Response Times",
            "type": "Heatmap",
            "metrics": [
              "service.health.response_time"
            ],
            "axes": {
              "y": "service",
              "x": "time"
            }
          },
          {
            "title": "Resource Usage",
            "type": "Graph",
            "metrics": [
              "system.cpu.usage",
              "system.memory.usage"
            ],
            "visualization": {
              "type": "stacked",
              "thresholds": {
                "warning": 80,
                "critical": 90
              }
            }
          }
        ]
      },
      "business": {
        "title": "Business Metrics",
        "refresh": "1m",
        "panels": [
          {
            "title": "Reconciliation Rate",
            "type": "Graph",
            "metrics": [
              "business.reconciliation.rate"
            ],
            "aggregation": "rate(5m)"
          },
          {
            "title": "Matching Accuracy",
            "type": "Gauge",
            "metrics": [
              "business.matching.accuracy"
            ],
            "thresholds": {
              "green": 95,
              "yellow": 90,
              "red": 85
            }
          }
        ]
      }
    },
    "alerts": {
      "routing": {
        "critical": {
          "channels": ["pagerduty", "slack-critical"],
          "notification": {
            "initial": "immediate",
            "reminder": "15m",
            "recovery": "immediate"
          }
        },
        "warning": {
          "channels": ["slack-warning", "email"],
          "notification": {
            "initial": "immediate",
            "reminder": "1h",
            "recovery": "immediate"
          }
        },
        "info": {
          "channels": ["slack-info"],
          "notification": {
            "initial": "immediate",
            "recovery": "none"
          }
        }
      },
      "templates": {
        "service_down": {
          "severity": "critical",
          "summary": "Service {{service}} is down",
          "description": "Service {{service}} has been unavailable for {{duration}}",
          "runbook": "https://runbooks.company.com/service-down"
        },
        "high_error_rate": {
          "severity": "warning",
          "summary": "High error rate in {{service}}",
          "description": "Error rate is {{value}}% (threshold: {{threshold}}%)",
          "runbook": "https://runbooks.company.com/high-error-rate"
        }
      }
    }
  },
  "plannedTestDocumentation": {
    "notice": "üß™ PLANNED TEST STRATEGY - Most tests not yet implemented",
    "implementationStatus": "In Planning Phase",
    "testDependencies": {
      "runtime": {
        "org.junit.jupiter:junit-jupiter-api": {
          "version": "5.10.0",
          "scope": "test",
          "transitive": [
            "org.junit.platform:junit-platform-commons:1.10.0",
            "org.opentest4j:opentest4j:1.3.0"
          ]
        },
        "org.mockito:mockito-core": {
          "version": "5.18.0",
          "scope": "test"
        },
        "org.testcontainers:testcontainers": {
          "version": "1.19.7",
          "scope": "test"
        },
        "io.prometheus:simpleclient_testing": {
          "version": "0.16.0",
          "scope": "test"
        }
      },
      "versionConflicts": [
        {
          "description": "Prometheus client version mismatch",
          "detail": "Spring Boot wants 0.15.0, project needs 0.16.0",
          "resolution": "Override in dependencyManagement"
        }
      ]
    },
    "testSetupProcedures": {
      "localDevelopment": {
        "prerequisites": [
          {
            "component": "Java Development Kit",
            "version": "21",
            "configuration": {
              "JAVA_HOME": "Required",
              "PATH": "Must include java binary"
            }
          },
          {
            "component": "Docker",
            "version": "24.0.0+",
            "purpose": "Running test containers"
          },
          {
            "component": "Maven",
            "version": "3.9.5+",
            "configuration": {
              "settings.xml": "Must include company repository",
              "MAVEN_OPTS": "-Xmx1g -XX:MaxMetaspaceSize=256m"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Clean workspace",
            "command": "mvn clean",
            "validation": "Check target directory is removed"
          },
          {
            "order": 2,
            "action": "Start monitoring stack",
            "command": "docker-compose -f src/test/resources/docker-compose-monitoring.yml up -d",
            "services": [
              "prometheus",
              "grafana",
              "loki",
              "tempo"
            ],
            "validation": "Verify all services are healthy"
          }
        ]
      },
      "ciEnvironment": {
        "prerequisites": [
          {
            "component": "CI Runner",
            "requirements": {
              "memory": "4GB minimum",
              "cpu": "2 cores minimum",
              "docker": "Required for test containers"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Cache dependencies",
            "paths": [
              "~/.m2/repository",
              ".maven-cache"
            ]
          },
          {
            "order": 2,
            "action": "Configure test environment",
            "variables": [
              "TEST_PROMETHEUS_PORT",
              "TEST_GRAFANA_PORT",
              "TEST_LOG_LEVEL"
            ]
          }
        ]
      }
    },
    "testDataGeneration": {
      "metricData": {
        "generator": "src/test/java/com/grace/recon/monitor/util/MetricDataGenerator.java",
        "scenarios": [
          {
            "name": "serviceMetrics",
            "description": "Generate test service metrics",
            "metrics": [
              {
                "name": "service_health_status",
                "type": "gauge",
                "labels": {
                  "service": ["matcher", "escalator", "reporter"],
                  "status": ["healthy", "degraded", "down"]
                },
                "values": "Random between 0 and 2"
              },
              {
                "name": "service_response_time",
                "type": "histogram",
                "labels": {
                  "service": ["matcher", "escalator", "reporter"],
                  "endpoint": ["/health", "/metrics", "/ready"]
                },
                "values": "Random between 0.1s and 5s"
              }
            ]
          },
          {
            "name": "alertConditions",
            "description": "Generate test alert conditions",
            "metrics": [
              {
                "name": "high_error_rate",
                "type": "counter",
                "labels": {
                  "service": ["matcher", "escalator"],
                  "error_type": ["validation", "processing", "timeout"]
                },
                "values": "Incrementing with random spikes"
              },
              {
                "name": "resource_usage",
                "type": "gauge",
                "labels": {
                  "resource": ["cpu", "memory", "disk"],
                  "service": ["matcher", "escalator"]
                },
                "values": "Random between 0% and 100%"
              }
            ]
          }
        ]
      },
      "logData": {
        "generator": "src/test/java/com/grace/recon/monitor/util/LogDataGenerator.java",
        "types": [
          {
            "name": "serviceLog",
            "template": "src/test/resources/data/service-log-template.json",
            "variations": [
              "Different log levels",
              "Various services",
              "Different message patterns"
            ]
          },
          {
            "name": "metricLog",
            "template": "src/test/resources/data/metric-log-template.json",
            "variations": [
              "Different metric types",
              "Value ranges",
              "Label combinations"
            ]
          }
        ]
      }
    },
    "testEnvironments": {
      "unit": {
        "scope": "Component level testing",
        "isolation": "Full isolation with mocks",
        "coverage": {
          "target": "90%",
          "exclusions": [
            "DTOs",
            "Configuration classes"
          ]
        }
      },
      "integration": {
        "scope": "Component interaction testing",
        "dependencies": {
          "prometheus": {
            "type": "TestContainers",
            "version": "v2.49.1",
            "configuration": {
              "port": "Random",
              "scrapeInterval": "5s"
            }
          },
          "grafana": {
            "type": "TestContainers",
            "version": "10.4.0",
            "configuration": {
              "port": "Random",
              "provisioning": "Test dashboards"
            }
          }
        },
        "dataSetup": {
          "preTest": [
            "Clear metric storage",
            "Initialize test data",
            "Reset alert rules"
          ],
          "postTest": [
            "Verify metric cleanup",
            "Check alert state",
            "Validate dashboard state"
          ]
        }
      }
    },
    "testPerformanceMetrics": {
      "executionTimes": {
        "unit": {
          "target": "< 5 seconds",
          "current": {
            "average": "2.3 seconds",
            "p95": "3.1 seconds"
          }
        },
        "integration": {
          "target": "< 2 minutes",
          "current": {
            "average": "1.5 minutes",
            "p95": "1.8 minutes"
          }
        }
      },
      "resourceUtilization": {
        "memory": {
          "heap": {
            "target": "< 1GB",
            "current": "750MB peak"
          },
          "metaspace": {
            "target": "< 256MB",
            "current": "180MB peak"
          }
        },
        "cpu": {
          "target": "< 2 cores",
          "current": "1.5 cores average"
        }
      }
    },
    "knownFailurePoints": {
      "MetricsCollectorTest": {
        "testHighVolumeMetrics": {
          "location": "src/test/java/com/grace/recon/monitor/metrics/MetricsCollectorTest.java:45-68",
          "failureType": "Memory",
          "stackTrace": {
            "exception": "OutOfMemoryError: Java heap space",
            "trace": [
              "at MetricsCollectorTest.testHighVolumeMetrics(MetricsCollectorTest.java:58)"
            ],
            "rootCause": "Large metric batch processing",
            "frequency": "Under high load conditions"
          },
          "reproduction": {
            "steps": [
              "1. Generate 100K+ metrics",
              "2. Submit in single batch",
              "3. Monitor memory usage"
            ],
            "requiredSetup": {
              "jvmArgs": "-Xmx512m -XX:MaxMetaspaceSize=128m"
            }
          }
        }
      },
      "AlertManagerTest": {
        "testAlertEvaluation": {
          "location": "src/test/java/com/grace/recon/monitor/alert/AlertManagerTest.java:72-95",
          "failureType": "Timing",
          "stackTrace": {
            "exception": "AssertionError: Alert not triggered within timeout",
            "trace": [
              "at AlertManagerTest.testAlertEvaluation(AlertManagerTest.java:85)"
            ],
            "frequency": "~3% of test runs"
          }
        }
      }
    },
    "raceConditions": {
      "metricProcessing": {
        "location": "src/main/java/com/grace/recon/monitor/metrics/MetricsCollector.java:55-75",
        "description": "Concurrent metric updates",
        "impactedTests": ["testConcurrentMetricUpdates"],
        "mitigation": "Using atomic operations and thread-safe collections",
        "reproductionSteps": [
          "1. Configure multiple collector threads",
          "2. Submit overlapping metric updates",
          "3. Verify metric consistency"
        ]
      },
      "alertProcessing": {
        "location": "src/main/java/com/grace/recon/monitor/alert/AlertManager.java:88-96",
        "description": "Alert state transitions",
        "impactedTests": ["testAlertStateTransitions"],
        "mitigation": "State machine with proper synchronization"
      }
    },
    "resourceManagement": {
      "prometheusContainer": {
        "setup": {
          "location": "src/test/java/com/grace/recon/monitor/config/PrometheusContainer.java",
          "startupOrder": [
            "1. Launch Prometheus container",
            "2. Wait for port availability",
            "3. Configure scrape targets"
          ],
          "cleanup": [
            "1. Clear metric data",
            "2. Stop container",
            "3. Remove volumes"
          ]
        },
        "knownIssues": [
          "Slow startup on Windows",
          "Memory usage under high metric volume"
        ]
      },
      "grafanaContainer": {
        "setup": {
          "location": "src/test/java/com/grace/recon/monitor/config/GrafanaContainer.java",
          "startupOrder": [
            "1. Launch Grafana container",
            "2. Wait for service readiness",
            "3. Configure datasources",
            "4. Import test dashboards"
          ],
          "cleanup": [
            "1. Export test results",
            "2. Clear dashboards",
            "3. Stop container"
          ]
        }
      }
    }
  },
  "plannedSecurityConsiderations": {
    "notice": "üîí PLANNED SECURITY FEATURES - Not yet implemented",
    "implementationStatus": "In Planning Phase",
    "authentication": {
      "metrics": {
        "prometheus": {
          "mechanism": "Basic Auth",
          "tls": "1.3"
        },
        "grafana": {
          "mechanism": "OAuth2/OIDC",
          "providers": ["Azure AD", "Okta"],
          "tls": "1.3"
        }
      },
      "api": {
        "mechanism": "JWT",
        "issuer": "company-auth",
        "algorithms": ["RS256"]
      }
    },
    "authorization": {
      "grafana": {
        "roles": [
          {
            "name": "monitoring_viewer",
            "permissions": [
              "View dashboards",
              "View alerts"
            ]
          },
          {
            "name": "monitoring_editor",
            "permissions": [
              "Edit dashboards",
              "Manage alerts",
              "Configure datasources"
            ]
          },
          {
            "name": "monitoring_admin",
            "permissions": [
              "All editor permissions",
              "Manage users",
              "Configure system"
            ]
          }
        ]
      },
      "prometheus": {
        "roles": [
          {
            "name": "metrics_reader",
            "permissions": [
              "query",
              "read_rules"
            ]
          },
          {
            "name": "metrics_admin",
            "permissions": [
              "write_rules",
              "manage_storage"
            ]
          }
        ]
      }
    },
    "dataProtection": {
      "encryption": {
        "inTransit": {
          "metrics": "TLS 1.3",
          "logs": "TLS 1.3",
          "traces": "TLS 1.3"
        },
        "atRest": {
          "prometheus": "Volume encryption",
          "loki": "Volume encryption",
          "tempo": "Volume encryption",
          "grafana": "Database encryption"
        }
      },
      "pci": {
        "masking": {
          "fields": [
            "cardNumber",
            "accountNumber"
          ],
          "strategy": "Last 4 digits visible"
        },
        "retention": {
          "metrics": "90 days",
          "logs": "1 year",
          "traces": "30 days"
        }
      }
    },
    "networkSecurity": {
      "firewalls": {
        "ingress": [
          {
            "port": 9090,
            "protocol": "TCP",
            "source": "Internal network",
            "service": "Prometheus"
          },
          {
            "port": 3000,
            "protocol": "TCP",
            "source": "Internal network",
            "service": "Grafana"
          }
        ],
        "egress": [
          {
            "port": "9100",
            "protocol": "TCP",
            "destination": "Node exporters",
            "service": "Prometheus"
          },
          {
            "port": "8080",
            "protocol": "TCP",
            "destination": "Application metrics",
            "service": "Prometheus"
          }
        ]
      }
    }
  },
  "plannedPerformanceConsiderations": {
    "notice": "‚ö° PLANNED PERFORMANCE FEATURES - Not yet implemented",
    "implementationStatus": "In Planning Phase",
    "metrics": {
      "collection": {
        "scrapeInterval": "15s",
        "timeoutInterval": "10s",
        "maxSamples": 50000,
        "optimizations": [
          {
            "area": "Storage",
            "suggestions": [
              "Use TSDB compression",
              "Configure retention periods",
              "Implement downsampling"
            ]
          },
          {
            "area": "Query",
            "suggestions": [
              "Use recording rules for common queries",
              "Limit time range in dashboards",
              "Implement query caching"
            ]
          }
        ]
      },
      "storage": {
        "prometheus": {
          "retention": {
            "time": "15d",
            "size": "500GB"
          },
          "compaction": {
            "blockDuration": "2h",
            "maxBlockTime": "24h"
          }
        },
        "loki": {
          "retention": {
            "time": "30d",
            "size": "1TB"
          },
          "compaction": {
            "interval": "6h",
            "retainPeriod": "24h"
          }
        }
      }
    },
    "resourceRequirements": {
      "prometheus": {
        "cpu": {
          "request": "2",
          "limit": "4"
        },
        "memory": {
          "request": "8Gi",
          "limit": "16Gi"
        },
        "storage": {
          "size": "500Gi",
          "class": "ssd-storage"
        }
      },
      "grafana": {
        "cpu": {
          "request": "500m",
          "limit": "1"
        },
        "memory": {
          "request": "1Gi",
          "limit": "2Gi"
        }
      },
      "loki": {
        "cpu": {
          "request": "1",
          "limit": "2"
        },
        "memory": {
          "request": "4Gi",
          "limit": "8Gi"
        },
        "storage": {
          "size": "1Ti",
          "class": "ssd-storage"
        }
      }
    },
    "scaling": {
      "prometheus": {
        "horizontal": {
          "enabled": false,
          "note": "Use federation for scale-out"
        },
        "vertical": {
          "triggers": [
            {
              "metric": "prometheus_tsdb_head_series",
              "threshold": "1M series",
              "action": "Increase memory"
            },
            {
              "metric": "prometheus_engine_queries",
              "threshold": "100 qps",
              "action": "Increase CPU"
            }
          ]
        }
      },
      "grafana": {
        "horizontal": {
          "minReplicas": 2,
          "maxReplicas": 5,
          "metrics": [
            {
              "type": "Resource",
              "resource": "cpu",
              "targetAverageUtilization": 70
            }
          ]
        }
      }
    },
    "optimizations": {
      "queries": {
        "recordingRules": [
          {
            "name": "service:request_rate:5m",
            "query": "rate(http_requests_total[5m])",
            "interval": "1m"
          },
          {
            "name": "service:error_rate:5m",
            "query": "rate(http_requests_total{status=~\"5..\"}[5m])",
            "interval": "1m"
          }
        ],
        "federation": {
          "endpoints": [
            {
              "name": "long-term-storage",
              "match": ["job=\".*\""],
              "interval": "5m"
            }
          ]
        }
      },
      "storage": {
        "retention": {
          "rules": [
            {
              "match": ["job=\"high-frequency\""],
              "period": "7d"
            },
            {
              "match": ["job=\"low-frequency\""],
              "period": "30d"
            }
          ]
        },
        "compaction": {
          "policies": [
            {
              "range": "2h",
              "retentionPeriod": "1d"
            },
            {
              "range": "6h",
              "retentionPeriod": "7d"
            },
            {
              "range": "24h",
              "retentionPeriod": "30d"
            }
          ]
        }
      }
    }
  },
  "plannedApiSpecification": {
    "notice": "üìö PLANNED API - Not yet implemented",
    "implementationStatus": "In Planning Phase",
    "openapi": "3.0.3",
    "info": {
      "title": "Monitoring Service API",
      "version": "1.0.0",
      "description": "API for managing monitoring, metrics, and alerts"
    },
    "paths": {
      "/api/v1/metrics": {
        "get": {
          "summary": "Get metrics for services",
          "description": "Retrieve metrics for specified services and time range",
          "operationId": "getMetrics",
          "tags": ["Metrics"],
          "parameters": [
            {
              "name": "services",
              "in": "query",
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "enum": ["matcher", "escalator", "reporter"]
                }
              }
            },
            {
              "name": "from",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            {
              "name": "to",
              "in": "query",
              "required": true,
              "schema": {
                "type": "string",
                "format": "date-time"
              }
            },
            {
              "name": "step",
              "in": "query",
              "schema": {
                "type": "string",
                "default": "1m",
                "pattern": "^[0-9]+(s|m|h)$"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Metrics data",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": ["success", "error"]
                      },
                      "data": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "metric": {
                              "type": "string"
                            },
                            "labels": {
                              "type": "object",
                              "additionalProperties": {
                                "type": "string"
                              }
                            },
                            "values": {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": [
                                  {
                                    "type": "number",
                                    "description": "Timestamp in seconds"
                                  },
                                  {
                                    "type": "string",
                                    "description": "Sample value"
                                  }
                                ],
                                "minItems": 2,
                                "maxItems": 2
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "status": {
                        "type": "string",
                        "enum": ["error"]
                      },
                      "error": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/alerts": {
        "get": {
          "summary": "Get active alerts",
          "description": "Retrieve list of active alerts with optional filters",
          "operationId": "getAlerts",
          "tags": ["Alerts"],
          "parameters": [
            {
              "name": "severity",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["critical", "warning", "info"]
              }
            },
            {
              "name": "service",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "status",
              "in": "query",
              "schema": {
                "type": "string",
                "enum": ["firing", "resolved", "pending"]
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of alerts",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alertId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "name": {
                          "type": "string"
                        },
                        "severity": {
                          "type": "string",
                          "enum": ["critical", "warning", "info"]
                        },
                        "service": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": ["firing", "resolved", "pending"]
                        },
                        "value": {
                          "type": "number"
                        },
                        "startsAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "endsAt": {
                          "type": "string",
                          "format": "date-time"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "annotations": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/alerts/{alertId}/silence": {
        "post": {
          "summary": "Silence an alert",
          "description": "Create a silence for a specific alert",
          "operationId": "silenceAlert",
          "tags": ["Alerts"],
          "parameters": [
            {
              "name": "alertId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["duration", "createdBy", "comment"],
                  "properties": {
                    "duration": {
                      "type": "string",
                      "pattern": "^[0-9]+(h|d)$",
                      "example": "4h"
                    },
                    "createdBy": {
                      "type": "string"
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "201": {
              "description": "Silence created",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "silenceId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "startsAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "endsAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/dashboards": {
        "get": {
          "summary": "List dashboards",
          "description": "Retrieve list of available dashboards",
          "operationId": "listDashboards",
          "tags": ["Dashboards"],
          "parameters": [
            {
              "name": "folder",
              "in": "query",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tag",
              "in": "query",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "List of dashboards",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "uid": {
                          "type": "string"
                        },
                        "title": {
                          "type": "string"
                        },
                        "url": {
                          "type": "string"
                        },
                        "folder": {
                          "type": "string"
                        },
                        "type": {
                          "type": "string"
                        },
                        "tags": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ]
  },
  "helpfulResources": {
    "notice": "üìö Need help understanding this document?",
    "generalGuidance": [
      "Most features described are planned for future implementation",
      "Look for implementationStatus fields to understand current state",
      "Check currentImplementationStatus section for what exists now",
      "Emoji indicators: ‚úÖ = implemented, üöß = planned, üìù = in design"
    ],
    "whereToAskQuestions": [
      "Team chat: #recon-monitor-service",
      "Technical lead: @TechLead",
      "Documentation: #recon-docs channel"
    ],
    "commonQuestions": [
      {
        "question": "Is this feature implemented?",
        "answer": "Check the implementationStatus field in each section. If not marked as ‚úÖ, it's planned for future."
      },
      {
        "question": "Where do I start?",
        "answer": "Begin with currentImplementationStatus section to understand what exists, then review nextSteps."
      },
      {
        "question": "How do I contribute?",
        "answer": "Check nextSteps section and discuss with team in #recon-monitor-service channel."
      }
    ]
  }
} 