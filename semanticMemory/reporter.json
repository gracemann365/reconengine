{
  "documentInfo": {
    "lastUpdated": "2024-03-21",
    "status": "Initial Implementation",
    "friendlyNotice": "👋 Welcome! This document describes both current and planned features of the reporter service. We'll clearly mark what exists now versus what's coming soon."
  },

  "currentImplementationStatus": {
    "overview": "🚧 This service has basic setup with some initial implementations",
    "whatExists": {
      "notice": "✅ Here's what's actually implemented right now:",
      "files": [
        {
          "path": "ReporterApplication.java",
          "status": "Implemented",
          "description": "Basic Spring Boot application setup",
          "lineCount": 13
        }
      ],
      "configuration": {
        "server.port": 8083,
        "spring.application.name": "reporter-service"
      },
      "dependencies": {
        "implemented": [
          "spring-boot-starter-web",
          "spring-kafka",
          "kafka-streams",
          "common module"
        ]
      }
    }
  },

  "moduleName": "reporter",
  "description": "RepaaS - Analytical reporting from reconMetaDataBatwise via Kafka Streams",
  "version": "1.0.0-SNAPSHOT",
  "type": "Spring Boot Service",
  "groupId": "com.grace.recon",
  "artifactId": "reporter",
  "dependencyVersions": {
    "implementationStatus": "✅ All versions defined in parent pom.xml",
    "java": {
      "version": "21",
      "source": "${java.version} from parent pom"
    },
    "springBoot": {
      "version": "3.2.6",
      "source": "${spring-boot.version} from parent pom"
    },
    "springKafka": {
      "version": "3.2.3",
      "source": "Defined in parent pom dependencyManagement"
    },
    "kafkaClients": {
      "version": "3.6.1",
      "source": "Defined in parent pom dependencyManagement"
    },
    "avro": {
      "version": "1.11.3",
      "source": "Defined in parent pom dependencyManagement"
    },
    "micrometer": {
      "version": "1.13.1",
      "source": "${micrometer.version} from parent pom"
    },
    "logback": {
      "version": "1.5.18",
      "source": "Defined in parent pom dependencyManagement"
    },
    "testFrameworks": {
      "junit": {
        "version": "5.10.0",
        "source": "${junit-jupiter.version} from parent pom"
      },
      "mockito": {
        "version": "5.18.0",
        "source": "${mockito.version} from parent pom"
      }
    }
  },
  "buildTools": {
    "implementationStatus": "✅ All build tools configured in pom.xml",
    "maven": {
      "plugins": {
        "core": [
          {
            "name": "spring-boot-maven-plugin",
            "version": "3.2.6",
            "source": "${spring-boot-maven-plugin.version}",
            "configuration": {
              "excludes": ["lombok"]
            }
          },
          {
            "name": "maven-surefire-plugin",
            "version": "3.2.5",
            "source": "${maven-surefire-plugin.version}"
          },
          {
            "name": "maven-compiler-plugin",
            "version": "3.14.0",
            "source": "${maven-compiler-plugin.version}",
            "configuration": {
              "source": "21",
              "target": "21"
            }
          }
        ],
        "quality": [
          {
            "name": "jacoco-maven-plugin",
            "version": "0.8.13",
            "source": "${jacoco-maven-plugin.version}"
          },
          {
            "name": "spotless-maven-plugin",
            "version": "2.44.5",
            "source": "${spotless-maven-plugin.version}",
            "configuration": {
              "java": {
                "googleJavaFormat": {
                  "version": "1.19.2"
                }
              }
            }
          }
        ]
      }
    }
  },
  "mainComponents": {
    "implementationStatus": "🚧 Partially Implemented",
    "ReporterApplication": {
      "description": "Main Spring Boot application class for the reporting service",
      "sourceLocation": {
        "path": "src/main/java/com/grace/recon/reporter/ReporterApplication.java",
        "lineRange": "1-13",
        "totalLines": 13
      },
      "status": "Implemented",
      "configuration": {
        "parameters": [
          {
            "name": "server.port",
            "type": "int",
            "defaultValue": "8083",
            "impact": "Service port number",
            "location": "application.yml:2"
          }
        ]
      }
    },
    "suggestedComponents": {
      "KafkaStreamsProcessor": {
        "description": "Core stream processing component for analytics",
        "suggestedPath": "src/main/java/com/grace/recon/reporter/streams/KafkaStreamsProcessor.java",
        "requiredMethods": [
          {
            "signature": "buildTopology()",
            "purpose": "Define analytics processing topology",
            "suggestedImplementation": {
              "sourceTopics": ["matching-results", "matching-errors"],
              "sinkTopics": ["analytics-results"],
              "operations": [
                "Window aggregations",
                "Error rate analysis",
                "Performance metrics calculation"
              ]
            }
          }
        ],
        "errorHandling": {
          "patterns": [
            "Stream processing failures",
            "Serialization errors",
            "State store failures"
          ],
          "suggestedStrategies": [
            "Dead letter queues",
            "Retry with backoff",
            "Circuit breaker pattern"
          ]
        }
      }
    }
  },
  "testDocumentation": {
    "implementedTests": {
      "unitTests": {
        "ReporterApplicationTest": {
          "path": "src/test/java/com/grace/recon/reporter/ReporterApplicationTest.java",
          "status": "Empty",
          "required": true,
          "suggestedCoverage": [
            "Application context loading",
            "Configuration validation"
          ]
        }
      }
    },
    "testDependencies": {
      "actual": {
        "spring-boot-starter-test": {
          "scope": "test",
          "source": "reporter/pom.xml"
        },
        "spring-kafka-test": {
          "version": "3.2.3",
          "scope": "test",
          "source": "parent pom"
        },
        "junit-jupiter": {
          "version": "5.10.0",
          "source": "${junit-jupiter.version} from parent pom"
        },
        "mockito": {
          "version": "5.18.0",
          "source": "${mockito.version} from parent pom"
        }
      }
    },
    "knownFailurePoints": {
      "suggestedTests": {
        "KafkaStreamsProcessorTest": {
          "location": "src/test/java/com/grace/recon/reporter/streams/KafkaStreamsProcessorTest.java",
          "failureType": "Timing",
          "potentialIssues": {
            "stateStore": {
              "description": "State store initialization delays",
              "impact": "Test timeouts",
              "mitigation": "Increase test timeouts and add store ready checks"
            },
            "streamProcessing": {
              "description": "Stream processing delays under load",
              "impact": "Inconsistent test results",
              "mitigation": "Implement deterministic timing with TestDriver"
            }
          },
          "reproduction": {
            "steps": [
              "Configure large state stores",
              "Process high-volume test data",
              "Verify processing results"
            ],
            "requiredSetup": {
              "jvmArgs": "-Xmx1g -XX:MaxMetaspaceSize=256m"
            }
          }
        }
      }
    },
    "raceConditions": {
      "streamProcessing": {
        "description": "Concurrent access to state stores",
        "impactedAreas": [
          "Window aggregations",
          "State store updates",
          "Metric calculations"
        ],
        "mitigation": {
          "strategies": [
            "Use thread-safe collections",
            "Implement proper locking mechanisms",
            "Ensure atomic operations"
          ],
          "implementation": {
            "stateStore": "Use RocksDB with appropriate sync settings",
            "metrics": "Use atomic operations for counters",
            "processing": "Single-threaded processing per partition"
          }
        }
      },
      "reporting": {
        "description": "Concurrent report generation",
        "impactedAreas": [
          "Analytics calculations",
          "Report generation",
          "Resource utilization"
        ],
        "mitigation": {
          "strategies": [
            "Implement request queuing",
            "Use resource semaphores",
            "Cache frequent reports"
          ]
        }
      }
    },
    "resourceManagement": {
      "testContainers": {
        "kafka": {
          "setup": {
            "order": [
              "Start Kafka container",
              "Wait for broker readiness",
              "Create required topics",
              "Configure client properties"
            ],
            "configuration": {
              "image": "confluentinc/cp-kafka:7.4.0",
              "environment": {
                "KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR": "1",
                "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR": "1"
              }
            }
          },
          "cleanup": {
            "order": [
              "Close stream processors",
              "Delete test topics",
              "Stop containers"
            ],
            "verificationSteps": [
              "Verify no active consumers",
              "Check topic deletion",
              "Ensure container cleanup"
            ]
          }
        },
        "stateStores": {
          "setup": {
            "order": [
              "Configure state directory",
              "Initialize RocksDB",
              "Load test data"
            ],
            "cleanup": [
              "Close state stores",
              "Delete state directory",
              "Verify cleanup"
            ]
          }
        }
      }
    },
    "testSetupProcedures": {
      "localDevelopment": {
        "prerequisites": [
          {
            "component": "Java Development Kit",
            "version": "21",
            "configuration": {
              "JAVA_HOME": "Required",
              "PATH": "Must include java binary"
            }
          },
          {
            "component": "Docker",
            "version": "24.0.0+",
            "purpose": "Running Kafka test containers"
          },
          {
            "component": "Maven",
            "version": "3.9.5+",
            "configuration": {
              "settings.xml": "Must include company repository",
              "MAVEN_OPTS": "-Xmx1g -XX:MaxMetaspaceSize=256m"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Clean workspace",
            "command": "mvn clean",
            "validation": "Check target directory is removed"
          },
          {
            "order": 2,
            "action": "Generate test resources",
            "command": "mvn generate-test-resources",
            "validation": "Verify test resources exist"
          }
        ]
      },
      "ciEnvironment": {
        "prerequisites": [
          {
            "component": "CI Runner",
            "requirements": {
              "memory": "4GB minimum",
              "cpu": "2 cores minimum",
              "docker": "Required for test containers"
            }
          }
        ],
        "setupSteps": [
          {
            "order": 1,
            "action": "Cache dependencies",
            "paths": [
              "~/.m2/repository",
              ".maven-cache"
            ]
          },
          {
            "order": 2,
            "action": "Configure test environment",
            "variables": [
              "TEST_KAFKA_BROKERS",
              "TEST_LOG_LEVEL"
            ]
          }
        ]
      }
    },
    "testDataGeneration": {
      "analyticsData": {
        "generator": "src/test/java/com/grace/recon/reporter/util/TestDataGenerator.java",
        "scenarios": [
          {
            "name": "matchingResults",
            "description": "Generate test matching results",
            "fields": {
              "matchId": "UUID",
              "timestamp": "Current time",
              "matchType": ["EXACT", "FUZZY", "NONE"],
              "confidence": "Double between 0 and 1"
            }
          },
          {
            "name": "errorPatterns",
            "description": "Generate test error patterns",
            "fields": {
              "errorId": "UUID",
              "errorType": ["VALIDATION", "PROCESSING", "TIMEOUT"],
              "severity": ["HIGH", "MEDIUM", "LOW"],
              "timestamp": "Current time"
            }
          }
        ]
      },
      "stateStoreData": {
        "generator": "src/test/java/com/grace/recon/reporter/util/StateStoreGenerator.java",
        "types": [
          {
            "name": "windowedAnalytics",
            "template": "src/test/resources/data/windowed-analytics-template.json",
            "variations": [
              "Hourly windows",
              "Daily windows",
              "Weekly windows"
            ]
          },
          {
            "name": "errorAnalytics",
            "template": "src/test/resources/data/error-analytics-template.json",
            "variations": [
              "Error patterns",
              "Error rates",
              "Impact analysis"
            ]
          }
        ]
      }
    },
    "testEnvironments": {
      "unit": {
        "scope": "Component level testing",
        "isolation": "Full isolation with mocks",
        "coverage": {
          "target": "90%",
          "exclusions": [
            "DTOs",
            "Configuration classes"
          ]
        }
      },
      "integration": {
        "scope": "Stream processing verification",
        "dependencies": {
          "kafka": {
            "type": "TestContainers",
            "version": "Confluent 7.4.0",
            "configuration": {
              "topics": [
                "test-matching-results",
                "test-analytics-output"
              ],
              "partitions": 3,
              "replication": 1
            }
          }
        },
        "dataSetup": {
          "preTest": [
            "Clear all topics",
            "Initialize test data",
            "Reset metrics"
          ],
          "postTest": [
            "Verify topic cleanup",
            "Check resource cleanup",
            "Validate metrics reset"
          ]
        }
      }
    },
    "testPerformanceMetrics": {
      "executionTimes": {
        "unit": {
          "target": "< 5 seconds",
          "current": {
            "average": "Not measured",
            "p95": "Not measured"
          }
        },
        "integration": {
          "target": "< 2 minutes",
          "current": {
            "average": "Not measured",
            "p95": "Not measured"
          }
        }
      },
      "resourceUtilization": {
        "memory": {
          "heap": {
            "target": "< 1GB",
            "current": "Not measured"
          },
          "metaspace": {
            "target": "< 256MB",
            "current": "Not measured"
          }
        },
        "cpu": {
          "target": "< 2 cores",
          "current": "Not measured"
        }
      }
    }
  },
  "dataFlowAnalysis": {
    "implementationStatus": "Not Started",
    "notice": "This entire section is planned - no implementation yet",
    "suggestedTopologies": {
      "reconAnalytics": {
        "description": "Process and analyze reconciliation metadata",
        "stages": [
          {
            "name": "Ingestion",
            "operations": [
              "Consume from reconMetaDataBatwise topic",
              "Deserialize records",
              "Initial validation"
            ],
            "detailedOperations": {
              "recordValidation": {
                "checks": [
                  {
                    "field": "batchId",
                    "validation": "UUID format check",
                    "errorHandling": "Route to DLQ if invalid"
                  },
                  {
                    "field": "timestamp",
                    "validation": "ISO-8601 format + not future date",
                    "errorHandling": "Adjust to current time if future"
                  }
                ]
              }
            }
          }
        ]
      }
    },
    "stateStores": {
      "suggested": [
        {
          "name": "matching-analytics-store",
          "type": "WindowStore",
          "retention": "24 hours",
          "purpose": "Store windowed analytics data"
        },
        {
          "name": "error-patterns-store",
          "type": "KeyValueStore",
          "purpose": "Store error pattern analysis"
        }
      ]
    },
    "errorHandling": {
      "strategies": {
        "deserialization": {
          "approach": "Skip and log",
          "metrics": "Increment error counter"
        },
        "processing": {
          "approach": "Retry with backoff",
          "maxAttempts": 3,
          "backoffPeriod": "exponential"
        },
        "stateStore": {
          "approach": "Circuit breaker",
          "fallback": "In-memory processing"
        }
      }
    }
  },
  "monitoringAndObservability": {
    "implementationStatus": "Partially Implemented",
    "notice": "Only basic dependencies are implemented, all features are planned",
    "actualDependencies": {
      "metrics": {
        "micrometer-core": {
          "version": "1.13.1",
          "source": "${micrometer.version} from parent pom"
        },
        "micrometer-registry-prometheus": {
          "version": "1.13.1",
          "source": "${micrometer.version} from parent pom"
        }
      },
      "logging": {
        "logback-classic": {
          "version": "1.5.18",
          "source": "parent pom dependencyManagement"
        }
      },
      "tracing": {
        "opentelemetry-api": {
          "version": "1.38.0",
          "source": "parent pom dependencyManagement"
        }
      }
    },
    "suggestedMetrics": {
      "streamProcessing": {
        "throughput": {
          "name": "reporter.streams.throughput",
          "type": "Counter",
          "labels": ["topology", "operation"],
          "purpose": "Measure records processed per second"
        },
        "latency": {
          "name": "reporter.streams.latency",
          "type": "Histogram",
          "buckets": ["100ms", "500ms", "1s", "5s"],
          "purpose": "Measure processing time per record"
        },
        "stateStore": {
          "name": "reporter.statestore.size",
          "type": "Gauge",
          "labels": ["store", "type"],
          "purpose": "Monitor state store sizes"
        }
      },
      "errorTracking": {
        "errorRate": {
          "name": "reporter.errors.rate",
          "type": "Counter",
          "labels": ["type", "severity"],
          "purpose": "Track error occurrence rates"
        },
        "errorPatterns": {
          "name": "reporter.errors.patterns",
          "type": "Gauge",
          "labels": ["pattern", "component"],
          "purpose": "Monitor error pattern frequencies"
        }
      }
    },
    "dashboards": {
      "operational": {
        "title": "Reporter Analytics Dashboard",
        "refresh": "30s",
        "panels": [
          {
            "title": "Stream Processing Rate",
            "type": "Graph",
            "metrics": [
              "reporter.streams.throughput"
            ],
            "aggregation": "sum",
            "grouping": ["topology"]
          },
          {
            "title": "Processing Latency",
            "type": "Heatmap",
            "metrics": [
              "reporter.streams.latency"
            ],
            "percentiles": [50, 95, 99]
          },
          {
            "title": "Error Patterns",
            "type": "Table",
            "metrics": [
              "reporter.errors.patterns"
            ],
            "dimensions": ["pattern", "component"]
          }
        ]
      },
      "alerts": {
        "title": "Reporter Alerts Dashboard",
        "refresh": "1m",
        "panels": [
          {
            "title": "Active Alerts",
            "type": "Table",
            "metrics": [
              "ALERTS{service='reporter'}"
            ],
            "columns": [
              "alertname",
              "severity",
              "instance",
              "value"
            ]
          }
        ]
      }
    }
  },
  "performanceConsiderations": {
    "implementationStatus": "Not Started",
    "notice": "This entire section is planned - no implementation yet",
    "streamProcessing": {
      "optimizations": [
        {
          "area": "State Store",
          "suggestions": [
            "Use RocksDB for large states",
            "Configure retention periods",
            "Implement cleanup policies"
          ]
        },
        {
          "area": "Topology",
          "suggestions": [
            "Optimize window sizes",
            "Balance parallelism",
            "Use appropriate serializers"
          ]
        }
      ],
      "resourceRequirements": {
        "memory": {
          "heap": {
            "minimum": "1GB",
            "recommended": "2GB",
            "considerations": [
              "State store size",
              "Record cache size",
              "Window retention periods"
            ]
          },
          "offHeap": {
            "minimum": "512MB",
            "recommended": "1GB",
            "purpose": "RocksDB state stores"
          }
        },
        "cpu": {
          "minimum": "2 cores",
          "recommended": "4 cores",
          "considerations": [
            "Stream processing threads",
            "State store operations",
            "Analytics calculations"
          ]
        }
      }
    }
  },
  "buildAndDeployment": {
    "currentState": {
      "buildConfiguration": {
        "buildTool": "Maven",
        "mainPomLocation": "reporter/pom.xml",
        "requiredJavaVersion": "21",
        "encoding": "UTF-8",
        "parentPom": {
          "groupId": "com.grace.recon",
          "artifactId": "reconengine",
          "version": "1.0.0-SNAPSHOT"
        }
      }
    },
    "suggestedDeployment": {
      "kubernetes": {
        "resources": {
          "requests": {
            "cpu": "500m",
            "memory": "1Gi"
          },
          "limits": {
            "cpu": "2",
            "memory": "2Gi"
          }
        },
        "scaling": {
          "horizontal": {
            "minReplicas": 2,
            "maxReplicas": 5,
            "metrics": [
              {
                "type": "CPU",
                "targetAverageUtilization": 70
              },
              {
                "type": "Memory",
                "targetAverageUtilization": 80
              }
            ]
          }
        },
        "probes": {
          "liveness": {
            "path": "/actuator/health/liveness",
            "initialDelaySeconds": 30,
            "periodSeconds": 10
          },
          "readiness": {
            "path": "/actuator/health/readiness",
            "initialDelaySeconds": 45,
            "periodSeconds": 15
          }
        }
      }
    }
  },
  "securityConsiderations": {
    "implementationStatus": "Not Started",
    "notice": "This entire section is planned - no implementation yet",
    "dataProtection": {
      "inTransit": {
        "kafka": {
          "encryption": "TLS 1.3",
          "authentication": "SASL/SCRAM",
          "authorization": "ACLs"
        },
        "api": {
          "encryption": "TLS 1.3",
          "authentication": "JWT",
          "authorization": "Role-based"
        }
      },
      "atRest": {
        "stateStores": {
          "encryption": "AES-256",
          "keyRotation": "90 days"
        }
      }
    },
    "accessControl": {
      "kafka": {
        "topics": {
          "read": [
            "reconMetaDataBatwise"
          ],
          "write": [
            "analytics-results"
          ]
        }
      },
      "api": {
        "roles": [
          {
            "name": "REPORTER_READ",
            "permissions": [
              "View analytics",
              "Download reports"
            ]
          },
          {
            "name": "REPORTER_ADMIN",
            "permissions": [
              "Configure analytics",
              "Manage state stores"
            ]
          }
        ]
      }
    }
  },
  "reportingTemplates": {
    "implementationStatus": "Not Started",
    "notice": "This entire section is planned - no implementation yet",
    "reconciliationSummary": {
      "type": "Daily Summary",
      "format": "PDF/Excel",
      "sections": [
        {
          "name": "ExecutiveSummary",
          "content": {
            "metrics": [
              {
                "name": "Total Transaction Volume",
                "calculation": "sum(transactions)",
                "breakdown": ["source", "type"]
              },
              {
                "name": "Match Rate",
                "calculation": "count(matched) / count(total) * 100",
                "thresholds": {
                  "warning": "< 95%",
                  "critical": "< 90%"
                }
              },
              {
                "name": "Unmatched Value",
                "calculation": "sum(amount) where matchStatus = 'UNMATCHED'",
                "format": "Currency"
              }
            ],
            "charts": [
              {
                "type": "TimeSeries",
                "title": "Hourly Match Rate Trend",
                "data": {
                  "x": "hour",
                  "y": "matchRate",
                  "groupBy": "source"
                },
                "visualization": {
                  "type": "line",
                  "colors": ["#2E7D32", "#1565C0", "#C62828"],
                  "annotations": {
                    "threshold": {
                      "line": 95,
                      "label": "SLA Threshold"
                    }
                  }
                }
              },
              {
                "type": "PieChart",
                "title": "Match Type Distribution",
                "data": {
                  "values": "matchType",
                  "labels": ["Exact", "Fuzzy", "Manual", "Unmatched"]
                }
              }
            ]
          }
        },
        {
          "name": "DetailedAnalysis",
          "content": {
            "tables": [
              {
                "name": "UnmatchedTransactions",
                "columns": [
                  {
                    "name": "transactionId",
                    "type": "String",
                    "width": 20
                  },
                  {
                    "name": "amount",
                    "type": "Currency",
                    "width": 15,
                    "alignment": "right"
                  },
                  {
                    "name": "source",
                    "type": "String",
                    "width": 10
                  },
                  {
                    "name": "reason",
                    "type": "String",
                    "width": 30
                  }
                ],
                "sorting": [
                  {
                    "column": "amount",
                    "direction": "DESC"
                  }
                ],
                "filters": [
                  {
                    "column": "amount",
                    "operator": ">",
                    "value": 1000
                  }
                ]
              },
              {
                "name": "ErrorSummary",
                "columns": [
                  {
                    "name": "errorType",
                    "type": "String",
                    "width": 20
                  },
                  {
                    "name": "count",
                    "type": "Integer",
                    "width": 10,
                    "aggregation": "sum"
                  },
                  {
                    "name": "impactedAmount",
                    "type": "Currency",
                    "width": 15,
                    "aggregation": "sum"
                  }
                ]
              }
            ],
            "charts": [
              {
                "type": "HeatMap",
                "title": "Error Concentration by Hour and Source",
                "data": {
                  "x": "hour",
                  "y": "source",
                  "value": "errorCount",
                  "colorScale": {
                    "ranges": [
                      {"min": 0, "max": 10, "color": "#E8F5E9"},
                      {"min": 11, "max": 50, "color": "#81C784"},
                      {"min": 51, "max": 100, "color": "#E57373"},
                      {"min": 101, "color": "#B71C1C"}
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "name": "TrendAnalysis",
          "content": {
            "timeSeries": [
              {
                "name": "VolumeComparison",
                "type": "MultiAxis",
                "series": [
                  {
                    "name": "Current Day",
                    "data": "hourlyVolume",
                    "type": "line"
                  },
                  {
                    "name": "Previous Day",
                    "data": "previousDayVolume",
                    "type": "line",
                    "style": "dashed"
                  },
                  {
                    "name": "Weekly Average",
                    "data": "weeklyAverageVolume",
                    "type": "area",
                    "opacity": 0.2
                  }
                ]
              }
            ],
            "anomalyDetection": {
              "algorithms": [
                {
                  "type": "ZScore",
                  "window": "1 hour",
                  "threshold": 2.0,
                  "metrics": ["volume", "errorRate", "matchRate"]
                },
                {
                  "type": "MovingAverage",
                  "window": "4 hours",
                  "deviationThreshold": "15%"
                }
              ],
              "visualization": {
                "type": "TimeSeriesWithAnnotations",
                "annotations": {
                  "style": {
                    "anomaly": {
                      "marker": "triangle",
                      "color": "#FF5252"
                    }
                  }
                }
              }
            }
          }
        }
      ],
      "delivery": {
        "schedule": {
          "frequency": "Daily",
          "time": "06:00 UTC",
          "timezone": "UTC"
        },
        "formats": [
          {
            "type": "PDF",
            "template": "templates/reconciliation-summary.html",
            "options": {
              "paperSize": "A4",
              "orientation": "portrait",
              "margins": {
                "top": "2cm",
                "bottom": "2cm",
                "left": "2.5cm",
                "right": "2.5cm"
              }
            }
          },
          {
            "type": "Excel",
            "template": "templates/reconciliation-summary.xlsx",
            "sheets": [
              {
                "name": "Summary",
                "startCell": "A1",
                "tables": ["ExecutiveSummary"]
              },
              {
                "name": "Details",
                "startCell": "A1",
                "tables": ["UnmatchedTransactions", "ErrorSummary"]
              },
              {
                "name": "Trends",
                "startCell": "A1",
                "charts": ["VolumeComparison"]
              }
            ]
          }
        ],
        "distribution": {
          "email": {
            "template": "templates/email/daily-summary.html",
            "subject": "Daily Reconciliation Summary - {{date}}",
            "recipients": {
              "to": ["reconciliation-team@company.com"],
              "cc": ["finance-team@company.com"],
              "conditions": {
                "criticalAlert": {
                  "condition": "matchRate < 90 || errorCount > 100",
                  "additionalRecipients": ["operations-team@company.com"]
                }
              }
            }
          },
          "storage": {
            "path": "/reports/daily/{{yyyy}}/{{mm}}/{{dd}}/",
            "retention": "90 days"
          }
        }
      }
    }
  },
  "apiSpecification": {
    "implementationStatus": "Not Started",
    "notice": "This entire section is planned - no implementation yet",
    "openapi": "3.0.3",
    "info": {
      "title": "Reconciliation Reporter API",
      "version": "1.0.0",
      "description": "API for generating and retrieving reconciliation reports"
    },
    "paths": {
      "/api/v1/reports": {
        "post": {
          "summary": "Generate a new report",
          "description": "Generates a new reconciliation report based on specified parameters",
          "operationId": "generateReport",
          "tags": ["Reports"],
          "requestBody": {
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["reportType", "timeRange"],
                  "properties": {
                    "reportType": {
                      "type": "string",
                      "enum": ["DAILY_SUMMARY", "HOURLY_DETAIL", "CUSTOM"],
                      "description": "Type of report to generate"
                    },
                    "timeRange": {
                      "type": "object",
                      "required": ["start", "end"],
                      "properties": {
                        "start": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-03-14T00:00:00Z"
                        },
                        "end": {
                          "type": "string",
                          "format": "date-time",
                          "example": "2024-03-14T23:59:59Z"
                        }
                      }
                    },
                    "filters": {
                      "type": "object",
                      "properties": {
                        "sources": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "example": ["VISA", "MASTERCARD"]
                        },
                        "matchTypes": {
                          "type": "array",
                          "items": {
                            "type": "string",
                            "enum": ["EXACT", "FUZZY", "MANUAL", "UNMATCHED"]
                          }
                        },
                        "minAmount": {
                          "type": "number",
                          "format": "double",
                          "example": 1000.00
                        }
                      }
                    },
                    "format": {
                      "type": "string",
                      "enum": ["PDF", "EXCEL", "JSON"],
                      "default": "PDF"
                    }
                  }
                },
                "examples": {
                  "dailySummary": {
                    "value": {
                      "reportType": "DAILY_SUMMARY",
                      "timeRange": {
                        "start": "2024-03-14T00:00:00Z",
                        "end": "2024-03-14T23:59:59Z"
                      },
                      "format": "PDF"
                    }
                  },
                  "customReport": {
                    "value": {
                      "reportType": "CUSTOM",
                      "timeRange": {
                        "start": "2024-03-14T09:00:00Z",
                        "end": "2024-03-14T17:00:00Z"
                      },
                      "filters": {
                        "sources": ["VISA"],
                        "matchTypes": ["UNMATCHED"],
                        "minAmount": 5000.00
                      },
                      "format": "EXCEL"
                    }
                  }
                }
              }
            }
          },
          "responses": {
            "202": {
              "description": "Report generation accepted",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reportId": {
                        "type": "string",
                        "format": "uuid",
                        "example": "123e4567-e89b-12d3-a456-426614174000"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["PENDING", "IN_PROGRESS"],
                        "example": "PENDING"
                      },
                      "estimatedCompletionTime": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request parameters",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "INVALID_REQUEST"
                      },
                      "message": {
                        "type": "string"
                      },
                      "details": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/reports/{reportId}": {
        "get": {
          "summary": "Get report status or download report",
          "description": "Retrieve the status of a report or download the completed report",
          "operationId": "getReport",
          "tags": ["Reports"],
          "parameters": [
            {
              "name": "reportId",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Report details or content",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "reportId": {
                        "type": "string",
                        "format": "uuid"
                      },
                      "status": {
                        "type": "string",
                        "enum": ["PENDING", "IN_PROGRESS", "COMPLETED", "FAILED"]
                      },
                      "progress": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "completedAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "downloadUrl": {
                        "type": "string",
                        "format": "uri"
                      }
                    }
                  }
                },
                "application/pdf": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                },
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "404": {
              "description": "Report not found",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "code": {
                        "type": "string",
                        "example": "REPORT_NOT_FOUND"
                      },
                      "message": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "/api/v1/reports/templates": {
        "get": {
          "summary": "List available report templates",
          "description": "Retrieve list of available report templates and their parameters",
          "operationId": "listReportTemplates",
          "tags": ["Templates"],
          "responses": {
            "200": {
              "description": "List of available templates",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "parameters": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "name": {
                                "type": "string"
                              },
                              "type": {
                                "type": "string"
                              },
                              "required": {
                                "type": "boolean"
                              },
                              "defaultValue": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "components": {
      "securitySchemes": {
        "bearerAuth": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      }
    },
    "security": [
      {
        "bearerAuth": []
      }
    ]
  },
  "helpfulResources": {
    "notice": "📚 Need help understanding this document?",
    "generalGuidance": [
      "Most features described are planned for future implementation",
      "Look for implementationStatus fields to understand current state",
      "Check currentImplementationStatus section for what exists now",
      "Emoji indicators: ✅ = implemented, 🚧 = planned/partial, 📝 = in design"
    ],
    "whereToAskQuestions": [
      "Team chat: #recon-reporter-service",
      "Technical lead: @TechLead",
      "Documentation: #recon-docs channel"
    ],
    "commonQuestions": [
      {
        "question": "Is this feature implemented?",
        "answer": "Check the implementationStatus field in each section. If not marked as ✅, it's planned for future."
      },
      {
        "question": "Where do I start?",
        "answer": "Begin with currentImplementationStatus section to understand what exists, then review planned features."
      },
      {
        "question": "How do I contribute?",
        "answer": "Check the currentImplementationStatus section and discuss with team in #recon-reporter-service channel."
      }
    ]
  }
} 