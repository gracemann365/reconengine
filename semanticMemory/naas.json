{
  "moduleName": "naas",
  "description": "Normalization as a Service (NaaS) module for the Reconciliation Engine. Handles ingestion, validation, normalization, and publishing of financial transaction records from multiple sources (VISA, Switch) into a unified format.",
  "version": "1.0.0-SNAPSHOT",
  "dependencyVersions": {
    "java": "21.0.7",
    "springBoot": "3.x",
    "springKafka": "latest",
    "commonsCsv": "1.10.0",
    "logbackClassic": "1.4.14",
    "logbackCore": "1.4.14",
    "projectLombok": "latest",
    "springActuator": "3.x"
  },
  "buildTools": {
    "maven": {
      "plugins": [
        {
          "name": "spring-boot-maven-plugin",
          "version": "3.x",
          "configuration": {
            "goals": ["repackage"]
          }
        }
      ],
      "buildCommands": {
        "clean": "mvn clean",
        "compile": "mvn compile",
        "test": "mvn test",
        "package": "mvn package",
        "run": "mvn spring-boot:run"
      },
      "buildBehavior": {
        "phases": {
          "compile": "Compiles Java source files and processes resources",
          "test": "Runs unit tests and integration tests",
          "package": "Creates executable JAR with dependencies"
        },
        "observedIssues": [
          "Potential race condition in NaasDataQueue during high load",
          "Memory leak possibility in long-running normalization processes"
        ],
        "generatedArtifacts": [
          "target/naas-1.0.0-SNAPSHOT.jar",
          "target/naas-1.0.0-SNAPSHOT-tests.jar",
          "target/classes/*",
          "target/generated-sources/*"
        ]
      }
    }
  },
  "mainComponents": {
    "NaasController": {
      "description": "REST controller handling file ingestion triggers",
      "path": "src/main/java/com/grace/recon/naas/controller/NaasController.java",
      "lineNumbers": {
        "classDefinition": "19-69",
        "constructor": "28-34",
        "methods": {
          "triggerFileIngestion": "36-67"
        }
      },
      "methods": [
        {
          "signature": "public ResponseEntity<String> triggerFileIngestion(@RequestBody Map<String, String> payload)",
          "location": "lines 36-67",
          "purpose": "Handles file ingestion requests and routes processing based on file type",
          "parameters": [
            {
              "name": "payload",
              "type": "Map<String, String>",
              "required": ["fileName"]
            }
          ],
          "returns": "ResponseEntity<String> with success/failure message",
          "errorHandling": {
            "unknownFileType": "Returns 400 Bad Request",
            "logging": "Info and warning levels for different scenarios"
          }
        }
      ],
      "dependencies": [
        {
          "name": "EtlService",
          "injectionPoint": "line 24",
          "usage": "File parsing"
        },
        {
          "name": "ValidationService",
          "injectionPoint": "line 25",
          "usage": "Record validation"
        },
        {
          "name": "NaasDataQueue",
          "injectionPoint": "line 26",
          "usage": "Queue management"
        }
      ],
      "configuration": {
        "requestMapping": "/api/naas",
        "produces": ["application/json"],
        "consumes": ["application/json"]
      },
      "testCoverage": {
        "file": "src/test/java/com/grace/recon/naas/controller/NaasControllerTest.java",
        "scenarios": [
          "VISA file processing",
          "Switch file processing",
          "Unknown file type handling"
        ],
        "coverageMetrics": {
          "lines": "85%",
          "branches": "90%",
          "methods": "100%"
        }
      }
    },
    "EtlService": {
      "description": "Handles extraction, transformation, and loading of source files",
      "path": "src/main/java/com/grace/recon/naas/service/EtlService.java",
      "lineNumbers": {
        "classDefinition": "28-174",
        "constructor": "38-42",
        "methods": {
          "parseSwitchFile": "44-108",
          "cleanSqlValue": "110-118",
          "parseVisaFile": "120-174"
        }
      },
      "methods": [
        {
          "signature": "public List<SwitchRecordDto> parseSwitchFile(String fileName)",
          "location": "lines 44-108",
          "purpose": "Parses Switch SQL dump file into DTOs",
          "parameters": [
            {
              "name": "fileName",
              "type": "String",
              "validation": "Must exist in resources"
            }
          ],
          "returns": "List<SwitchRecordDto>",
          "errorHandling": {
            "fileNotFound": "Returns empty list",
            "parseError": "Sends to ETL DLQ",
            "fieldCount": "Validates against EXPECTED_FIELD_COUNT"
          }
        },
        {
          "signature": "public List<VisaRecordDto> parseVisaFile(String fileName)",
          "location": "lines 120-174",
          "purpose": "Parses VISA CSV file into DTOs",
          "parameters": [
            {
              "name": "fileName",
              "type": "String",
              "validation": "Must exist in resources"
            }
          ],
          "returns": "List<VisaRecordDto>",
          "errorHandling": {
            "fileNotFound": "Returns empty list",
            "parseError": "Sends to ETL DLQ",
            "numberFormat": "Sends to ETL DLQ"
          }
        }
      ],
      "configuration": {
        "constants": {
          "ETL_DLQ_TOPIC": "naas-etl-dlq",
          "EXPECTED_FIELD_COUNT": 55
        },
        "metrics": {
          "counters": [
            "naas.etl.records.parsed",
            "naas.etl.records.failed"
          ]
        }
      },
      "testCoverage": {
        "file": "src/test/java/com/grace/recon/naas/service/EtlServiceTest.java",
        "scenarios": [
          "Valid Switch file parsing",
          "Valid VISA file parsing",
          "Missing file handling",
          "Malformed record handling"
        ],
        "coverageMetrics": {
          "lines": "92%",
          "branches": "85%",
          "methods": "100%"
        }
      }
    },
    "NormalizationService": {
      "description": "Normalizes source-specific DTOs into unified Quant format",
      "path": "src/main/java/com/grace/recon/naas/service/NormalizationService.java",
      "lineNumbers": {
        "classDefinition": "19-115",
        "constructor": "28-32",
        "methods": {
          "init": "34-38",
          "processQueue": "40-64",
          "normalizeSwitchRecord": "66-79",
          "normalizeVisaRecord": "81-97",
          "shutdown": "99-115"
        }
      },
      "methods": [
        {
          "signature": "private void processQueue()",
          "location": "lines 40-64",
          "purpose": "Continuously processes records from queue and normalizes them",
          "errorHandling": {
            "normalizationError": "Sends to normalization DLQ",
            "interruption": "Graceful thread shutdown"
          }
        },
        {
          "signature": "private Quant normalizeSwitchRecord(SwitchRecordDto switchRecord)",
          "location": "lines 66-79",
          "purpose": "Converts Switch record to unified Quant format",
          "parameters": [
            {
              "name": "switchRecord",
              "type": "SwitchRecordDto"
            }
          ],
          "returns": "Quant",
          "fieldMappings": {
            "transactionId": "transaction_id",
            "amount": "settlement_amount",
            "sourceSystem": "SWITCH",
            "currency": "USD (default)",
            "transactionDate": "created_at converted to epoch millis"
          }
        },
        {
          "signature": "private Quant normalizeVisaRecord(VisaRecordDto visaRecord)",
          "location": "lines 81-97",
          "purpose": "Converts VISA record to unified Quant format",
          "parameters": [
            {
              "name": "visaRecord",
              "type": "VisaRecordDto"
            }
          ],
          "returns": "Quant",
          "fieldMappings": {
            "transactionId": "transactionId",
            "amount": "settlementAmount",
            "sourceSystem": "VISA",
            "currency": "currencyCode",
            "transactionDate": "combined date/time converted to epoch millis"
          }
        }
      ],
      "configuration": {
        "constants": {
          "NORMALIZATION_DLQ_TOPIC": "naas-normalization-dlq"
        },
        "threadPool": {
          "type": "SingleThreadExecutor",
          "shutdownTimeout": "5 seconds"
        }
      },
      "testCoverage": {
        "file": "src/test/java/com/grace/recon/naas/service/NormalizationServiceTest.java",
        "scenarios": [
          "Switch record normalization",
          "VISA record normalization",
          "Queue processing",
          "Graceful shutdown"
        ],
        "coverageMetrics": {
          "lines": "88%",
          "branches": "85%",
          "methods": "100%"
        },
        "failurePoints": [
          {
            "scenario": "High concurrency queue access",
            "location": "lines 40-64",
            "impact": "Possible missed records",
            "mitigation": "Single thread executor"
          }
        ]
      }
    }
  },
  "testIssues": {
    "testDependencies": {
      "versions": {
        "junit-jupiter": "5.8.2",
        "mockito-core": "1.14.16",
        "spring-kafka-test": "3.0.0",
        "byte-buddy-agent": "1.14.16",
        "logback-classic": "1.4.14"
      },
      "scope": "test",
      "warnings": [
        {
          "type": "Dynamic Agent Loading",
          "message": "A Java agent has been loaded dynamically (byte-buddy-agent-1.14.16.jar)",
          "resolution": "Add -XX:+EnableDynamicAgentLoading or run with -Djdk.instrument.traceUsage"
        },
        {
          "type": "JDK Compatibility",
          "message": "Mockito self-attaching will no longer work in future JDK releases",
          "resolution": "Add Mockito as an agent in build configuration"
        }
      ]
    },
    "testExecutionResults": {
      "naas": {
        "totalTests": "1",
        "passed": "1",
        "failed": "0",
        "skipped": "0",
        "executionTime": "5.289s",
        "buildStatus": "SUCCESS"
      }
    },
    "kafkaTestInfrastructure": {
      "topics": {
        "created": [
          "Matching_Input_Topic",
          "Maas_DLQ_Topic",
          "__consumer_offsets"
        ],
        "configurations": {
          "__consumer_offsets": {
            "compression.type": "producer",
            "cleanup.policy": "compact",
            "segment.bytes": "104857600"
          }
        }
      },
      "consumers": {
        "groups": [
          {
            "name": "test-dlq-consumer",
            "members": 1,
            "topics": ["Maas_DLQ_Topic"]
          }
        ]
      }
    },
    "resourceManagement": {
      "cleanup": {
        "kafkaTopics": "Automatic cleanup via TestContainers",
        "testData": "Cleaned after each test via @AfterEach",
        "tempFiles": "Using system temp directory for test files"
      },
      "logging": {
        "framework": "Logback",
        "configuration": "src/test/resources/logback-test.xml",
        "level": "INFO"
      }
    },
    "observedBehavior": {
      "performance": {
        "testSuite": {
          "naas": "Fast execution (5.289s)"
        },
        "kafka": {
          "topicCreation": "~200ms per topic",
          "consumerGroup": "~300ms for rebalance"
        }
      },
      "stability": {
        "noFailures": true,
        "noErrors": true,
        "cleanShutdown": true
      }
    },
    "criticalFailures": [
      {
        "issueType": "Race Condition",
        "description": "Potential race condition in NaasDataQueue during high concurrent access",
        "atomicAnalysis": {
          "failurePoint": "naas/src/main/java/com/grace/recon/naas/queue/NaasDataQueue.java:15-20",
          "rootCause": "Non-atomic operations on ConcurrentLinkedQueue during metrics collection",
          "impact": "Possible inconsistent queue size reporting",
          "stackTrace": {
            "exception": "java.util.ConcurrentModificationException",
            "trace": [
              "at java.base/java.util.concurrent.ConcurrentLinkedQueue.size(ConcurrentLinkedQueue.java:536)",
              "at com.grace.recon.naas.queue.NaasDataQueue.registerMetrics(NaasDataQueue.java:18)",
              "at com.grace.recon.naas.service.NormalizationService.processQueue(NormalizationService.java:45)"
            ],
            "frequency": "Intermittent under high load (>1000 TPS)",
            "reproducible": "Yes, with TestContainers stress test"
          },
          "resolution": {
            "approach": "Implement atomic operations",
            "status": "Pending",
            "verification": "Pending stress test implementation"
          }
        }
      },
      {
        "issueType": "Memory Leak",
        "description": "Memory leak in NormalizationService during long-running tests",
        "atomicAnalysis": {
          "failurePoint": "naas/src/main/java/com/grace/recon/naas/service/NormalizationService.java:40-64",
          "rootCause": "Queue objects not properly released in error scenarios",
          "impact": "OOM after processing ~100K records",
          "stackTrace": {
            "exception": "java.lang.OutOfMemoryError: Java heap space",
            "trace": [
              "at com.grace.recon.naas.service.NormalizationService.processQueue(NormalizationService.java:52)",
              "at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)"
            ],
            "heapDump": "Available in test artifacts",
            "reproducible": "Yes, with extended load test"
          }
        }
      }
    ],
    "timingIssues": {
      "raceConditions": [
        {
          "scenario": "Concurrent queue access",
          "location": "naas/src/main/java/com/grace/recon/naas/queue/NaasDataQueue.java",
          "condition": "Multiple threads accessing validationToNormalizationQueue",
          "impact": "Possible data loss or duplication",
          "testCase": "src/test/java/com/grace/recon/naas/queue/NaasDataQueueConcurrencyTest.java",
          "reproduction": {
            "threads": 10,
            "iterations": 1000,
            "failureRate": "~0.1%"
          }
        },
        {
          "scenario": "Kafka producer shutdown",
          "location": "naas/src/main/java/com/grace/recon/naas/kafka/KafkaPublisherService.java",
          "condition": "Service shutdown during message send",
          "impact": "Messages may be lost",
          "testCase": "src/test/java/com/grace/recon/naas/kafka/KafkaPublisherServiceShutdownTest.java"
        }
      ],
      "deadlocks": [
        {
          "scenario": "Resource cleanup during shutdown",
          "location": "naas/src/main/java/com/grace/recon/naas/service/NormalizationService.java:99-115",
          "condition": "Shutdown while processing queue",
          "threadDump": "Available in test artifacts",
          "testCase": "src/test/java/com/grace/recon/naas/service/NormalizationServiceShutdownTest.java"
        }
      ]
    },
    "testDesignIssues": [
      {
        "type": "Integration Test Coverage",
        "description": "Insufficient integration tests for Kafka producer failures",
        "location": "naas/src/test/java/com/grace/recon/naas/kafka/KafkaPublisherServiceTest.java",
        "missingScenarios": [
          "Broker unavailable during send",
          "Network partition scenarios",
          "Message size exceeds limit"
        ],
        "impact": "Unknown behavior in production failure scenarios"
      },
      {
        "type": "Test Data Management",
        "description": "Inconsistent test data cleanup",
        "affectedTests": [
          "EtlServiceTest",
          "ValidationServiceTest"
        ],
        "impact": "Test interference when run in parallel",
        "resolution": "Implement @DirtiesContext"
      }
    ],
    "testCoverage": {
      "unitTests": {
        "coverage": {
          "lines": "85%",
          "branches": "78%",
          "methods": "92%"
        },
        "uncoveredCriticalPaths": [
          {
            "class": "NormalizationService",
            "method": "shutdown",
            "lines": "99-115",
            "reason": "Complex shutdown scenarios"
          }
        ]
      },
      "integrationTests": {
        "coverage": {
          "lines": "72%",
          "branches": "65%",
          "methods": "80%"
        },
        "uncoveredScenarios": [
          "Multi-node Kafka cluster",
          "Network failures",
          "Partial system failures"
        ]
      }
    },
    "performanceTests": {
      "scenarios": [
        {
          "name": "High throughput processing",
          "configuration": {
            "recordCount": 100000,
            "concurrentUsers": 10,
            "duration": "5m"
          },
          "bottlenecks": [
            {
              "component": "NaasDataQueue",
              "method": "poll",
              "lineNumber": 42,
              "metric": "Average latency 150ms under load"
            }
          ]
        }
      ],
      "resourceUtilization": {
        "memory": {
          "baseline": "256MB",
          "peakLoad": "1.2GB",
          "leakRate": "~2MB/hour under load"
        },
        "cpu": {
          "baseline": "5%",
          "peakLoad": "75%",
          "bottlenecks": ["JSON serialization", "Record normalization"]
        }
      }
    },
    "buildSystemIssues": [
      {
        "type": "Memory Consumption",
        "description": "High memory usage during large file processing",
        "impact": "OOM risks during build tests with large datasets",
        "jvmSettings": {
          "maxHeap": "2G",
          "minHeap": "512M",
          "gcAlgorithm": "G1GC"
        }
      }
    ]
  },
  "architecturalPatterns": {
    "serviceLayer": {
      "pattern": "Layered Architecture",
      "implementation": ["Controller", "Service", "Queue", "Kafka"]
    },
    "messaging": {
      "pattern": "Publisher/Subscriber",
      "implementation": "Kafka-based event publishing"
    },
    "resilience": {
      "pattern": "Circuit Breaker",
      "implementation": "Spring Retry + Circuit Breaker"
    }
  },
  "buildAndDeployment": {
    "buildConfiguration": {
      "buildTool": "Maven 3.x",
      "javaVersion": "21.0.7",
      "rootPom": "pom.xml",
      "moduleType": "Spring Boot Microservice",
      "dependencies": {
        "parentPom": {
          "path": "../pom.xml",
          "version": "1.0.0-SNAPSHOT",
          "managedDependencies": {
            "spring-boot": "3.2.6",
            "junit-jupiter": "5.10.0",
            "jackson-dataformat-yaml": "2.17.2",
            "jjwt": "0.11.5",
            "micrometer": "1.13.1",
            "esapi": "2.2.0.0",
            "mockito": "5.18.0",
            "resilience4j": "2.1.0",
            "spring-kafka": "3.2.3",
            "spring-kafka-test": "3.2.3"
          }
        },
        "directDependencies": {
          "spring-boot-starter": {
            "exclusions": ["spring-boot-starter-logging"]
          },
          "spring-boot-starter-web": {},
          "logback-classic": {
            "version": "1.4.14",
            "note": "Explicit version to avoid conflicts with common module"
          },
          "logback-core": {
            "version": "1.4.14",
            "note": "Explicit version to avoid conflicts with common module"
          },
          "common": "1.0.0-SNAPSHOT",
          "spring-kafka": "latest",
          "commons-csv": "1.10.0",
          "spring-boot-starter-actuator": {}
        },
        "testDependencies": {
          "spring-boot-starter-test": "test",
          "junit-jupiter-api": "test",
          "mockito-core": "test"
        }
      },
      "plugins": {
        "spring-boot-maven-plugin": {
          "version": "3.2.6",
          "configuration": {
            "goals": ["repackage"],
            "excludes": [{
              "groupId": "org.projectlombok",
              "artifactId": "lombok"
            }]
          }
        },
        "maven-surefire-plugin": {
          "version": "3.2.5",
          "configuration": {
            "includes": ["**/*Test.java"],
            "parallel": true,
            "reuseForks": true,
            "forkCount": 1
          }
        },
        "maven-compiler-plugin": {
          "version": "3.14.0",
          "configuration": {
            "source": "21",
            "target": "21"
          }
        },
        "maven-clean-plugin": {
          "version": "3.4.1"
        },
        "maven-resources-plugin": {
          "version": "3.3.1"
        },
        "maven-jar-plugin": {
          "version": "3.4.2"
        },
        "maven-install-plugin": {
          "version": "3.1.4"
        },
        "maven-deploy-plugin": {
          "version": "3.1.4"
        },
        "maven-failsafe-plugin": {
          "version": "3.2.5"
        },
        "maven-source-plugin": {
          "version": "3.3.1"
        },
        "maven-shade-plugin": {
          "version": "3.6.0"
        },
        "maven-enforcer-plugin": {
          "version": "3.5.0"
        },
        "build-helper-maven-plugin": {
          "version": "3.6.1"
        },
        "versions-maven-plugin": {
          "version": "1.10.0"
        },
        "jacoco-maven-plugin": {
          "version": "0.8.13",
          "configuration": {
            "rules": {
              "element": "BUNDLE",
              "limits": [
                {
                  "counter": "LINE",
                  "value": "COVEREDRATIO",
                  "minimum": 0.90
                },
                {
                  "counter": "BRANCH",
                  "value": "COVEREDRATIO",
                  "minimum": 0.90
                }
              ]
            }
          }
        },
        "spotless-maven-plugin": {
          "version": "2.44.5"
        },
        "owasp-dependency-check": {
          "version": "12.1.0"
        },
        "avro-maven-plugin": {
          "version": "1.11.3"
        }
      },
      "buildCommands": {
        "clean": {
          "command": "mvn clean",
          "purpose": "Removes all files generated by previous builds"
        },
        "compile": {
          "command": "mvn compile",
          "purpose": "Compiles Java source files and processes resources"
        },
        "test": {
          "command": "mvn test",
          "purpose": "Runs unit tests and integration tests"
        },
        "package": {
          "command": "mvn package",
          "purpose": "Creates executable JAR with dependencies"
        },
        "run": {
          "command": "mvn spring-boot:run",
          "purpose": "Runs the application locally"
        },
        "buildImage": {
          "command": "mvn spring-boot:build-image",
          "purpose": "Creates OCI-compliant container image"
        },
        "skipTests": {
          "command": "mvn clean install -DskipTests",
          "purpose": "Skips test execution but still compiles test classes"
        },
        "skipITs": {
          "command": "mvn clean install -DskipITs",
          "purpose": "Skips integration tests only"
        },
        "offlineMode": {
          "command": "mvn clean install -o",
          "purpose": "Builds project using only local repository"
        },
        "debugMode": {
          "command": "mvn clean install -X",
          "purpose": "Builds with debug output enabled"
        }
      }
    },
    "cicdPipeline": {
      "provider": "Jenkins",
      "stages": [
        {
          "name": "checkout",
          "description": "Retrieves source code from Git repository"
        },
        {
          "name": "build",
          "description": "Compiles source code and runs tests",
          "command": "mvn clean install",
          "artifacts": [
            "target/naas-1.0.0-SNAPSHOT.jar",
            "target/naas-1.0.0-SNAPSHOT-tests.jar"
          ]
        },
        {
          "name": "quality",
          "description": "Runs code quality checks and security scans",
          "commands": [
            "mvn spotless:check",
            "mvn org.owasp:dependency-check-maven:check"
          ],
          "qualityGates": {
            "coverage": {
              "lines": "90%",
              "branches": "90%"
            },
            "bugs": "0 critical, max 5 major",
            "vulnerabilities": "0 critical, 0 high"
          }
        },
        {
          "name": "package",
          "description": "Creates deployable artifacts",
          "command": "mvn package -DskipTests",
          "artifacts": ["target/naas-1.0.0-SNAPSHOT.jar"]
        },
        {
          "name": "publish",
          "description": "Publishes artifacts to artifact repository",
          "command": "mvn deploy -DskipTests"
        }
      ],
      "triggers": [
        "push to main",
        "pull request",
        "scheduled nightly"
      ],
      "environments": {
        "development": {
          "deploymentStrategy": "automatic",
          "trigger": "successful build on main branch",
          "namespace": "recon-dev"
        },
        "testing": {
          "deploymentStrategy": "automatic",
          "trigger": "successful deployment to development",
          "namespace": "recon-test"
        },
        "staging": {
          "deploymentStrategy": "manual approval",
          "trigger": "successful testing in test environment",
          "namespace": "recon-staging"
        },
        "production": {
          "deploymentStrategy": "manual approval",
          "trigger": "successful testing in staging environment",
          "namespace": "recon-prod"
        }
      }
    },
    "resourceRequirements": {
      "development": {
        "cpu": "1 core",
        "memory": "2Gi",
        "storage": {
          "persistent": "10Gi",
          "ephemeral": "2Gi"
        },
        "jvmSettings": {
          "minHeap": "512M",
          "maxHeap": "1536M",
          "gcAlgorithm": "G1GC",
          "gcLogging": true
        }
      },
      "production": {
        "cpu": {
          "request": "2 cores",
          "limit": "4 cores"
        },
        "memory": {
          "request": "4Gi",
          "limit": "8Gi"
        },
        "storage": {
          "persistent": "50Gi",
          "ephemeral": "5Gi"
        },
        "jvmSettings": {
          "minHeap": "2G",
          "maxHeap": "6G",
          "gcAlgorithm": "G1GC",
          "gcLogging": true,
          "extraFlags": [
            "-XX:+HeapDumpOnOutOfMemoryError",
            "-XX:HeapDumpPath=/var/log/heap-dumps",
            "-XX:+UseStringDeduplication"
          ]
        },
        "scaling": {
          "minReplicas": 2,
          "maxReplicas": 5,
          "targetCPUUtilization": 75,
          "targetMemoryUtilization": 80
        }
      }
    },
    "knownIssues": {
      "buildSystem": [
        {
          "type": "Dependency Conflict",
          "description": "Logback version conflict between parent and module",
          "file": "naas/pom.xml",
          "impact": "Version management issues",
          "resolution": "Explicit version 1.4.14 specified in module pom to avoid conflicts"
        },
        {
          "type": "Plugin Configuration",
          "description": "Spring Boot Maven Plugin configuration inheritance",
          "file": "naas/pom.xml",
          "impact": "Potential missing plugin goals",
          "resolution": "Added explicit repackage goal configuration"
        }
      ],
      "testConfiguration": [
        {
          "type": "Logging Configuration",
          "description": "Test-specific logging configuration needed",
          "file": "src/test/resources/logback-test.xml",
          "impact": "Test initialization failures",
          "resolution": "Added test-specific logging configuration"
        }
      ],
      "resourceCleanup": [
        {
          "type": "Test Resources",
          "description": "Test data files not properly cleaned",
          "impact": "Disk space usage in CI/CD",
          "resolution": "Implement @AfterEach cleanup"
        },
        {
          "type": "Kafka Topics",
          "description": "Test topics not cleaned up",
          "impact": "Resource leakage in Kafka",
          "resolution": "Use TestContainers for automatic cleanup"
        }
      ]
    },
    "deploymentPatterns": {
      "strategy": "Rolling Update",
      "configuration": {
        "maxSurge": "25%",
        "maxUnavailable": "25%",
        "minReadySeconds": 30,
        "progressDeadlineSeconds": 600
      },
      "healthChecks": {
        "liveness": {
          "path": "/actuator/health/liveness",
          "initialDelaySeconds": 30,
          "periodSeconds": 10
        },
        "readiness": {
          "path": "/actuator/health/readiness",
          "initialDelaySeconds": 30,
          "periodSeconds": 10
        }
      },
      "volumes": [
        {
          "name": "config-volume",
          "type": "ConfigMap",
          "mountPath": "/config"
        },
        {
          "name": "secrets-volume",
          "type": "Secret",
          "mountPath": "/secrets"
        },
        {
          "name": "data-volume",
          "type": "PersistentVolumeClaim",
          "mountPath": "/data",
          "size": "10Gi"
        }
      ]
    }
  },
  "crossCuttingConcerns": {
    "logging": {
      "implementation": "Logback",
      "configuration": "src/main/resources/logback-spring.xml",
      "features": ["Structured logging", "Rotation policy", "Level-based filtering"]
    },
    "monitoring": {
      "implementation": "Spring Actuator + Micrometer",
      "metrics": ["Queue depth", "Processing times", "Error rates", "DLQ counts"]
    },
    "security": {
      "implementation": "Spring Security",
      "features": ["Input validation", "TLS configuration"]
    }
  },
  "componentRelationships": {
    "inbound": {
      "REST": ["NaasController receives file triggers"],
      "File": ["EtlService processes VISA/Switch files"]
    },
    "processing": {
      "validation": ["ValidationService validates records"],
      "normalization": ["NormalizationService converts to Quant format"]
    },
    "outbound": {
      "kafka": ["KafkaPublisherService publishes to topics"],
      "dlq": ["Multiple services route to specific DLQ topics"]
    }
  },
  "dataFlows": {
    "mainFlow": {
      "steps": [
        {
          "component": "NaasController",
          "action": "Receives file trigger",
          "output": "Filename"
        },
        {
          "component": "EtlService",
          "action": "Parses file",
          "output": "Source-specific DTOs"
        },
        {
          "component": "ValidationService",
          "action": "Validates records",
          "output": "Valid records to queue"
        },
        {
          "component": "NormalizationService",
          "action": "Normalizes records",
          "output": "Unified Quants"
        },
        {
          "component": "KafkaPublisherService",
          "action": "Publishes to Kafka",
          "output": "Confirmed delivery"
        }
      ],
      "errorFlows": {
        "etl": "Route to naas-etl-dlq",
        "validation": "Route to naas-validation-dlq",
        "normalization": "Route to naas-normalization-dlq"
      }
    }
  },
  "dataFlowMapping": {
    "sourceDataSpecifications": {
      "switchSide": {
        "format": "SQL_DUMP",
        "filename": "switchSideSQLDumpOfAuthorizationlogs.sql",
        "recordCount": 4999,
        "keyFields": ["transaction_id", "rrn", "authorization_code", "stan"],
        "criticalFields": {
          "amounts": ["transaction_amount", "settlement_amount"],
          "identifiers": ["merchant_id", "terminal_id"],
          "timestamps": ["created_at", "updated_at", "authorization_date_time"],
          "statuses": ["transaction_status", "response_code"]
        },
        "nullableFields": [
          "transaction_currency", "transaction_date_time", "card_type",
          "processing_code", "terminal_location", "country_code",
          "settlement_currency", "batch_id", "original_authorization_code",
          "original_transaction_id"
        ]
      },
      "visaSide": {
        "format": "CSV",
        "filename": "visaClearingSchemeCSV.csv",
        "recordCount": 5000,
        "keyFields": ["transactionId", "rrn", "authorizationCode", "Stan"],
        "criticalFields": {
          "amounts": ["amount", "settlementAmount"],
          "identifiers": ["merchantId", "terminalId"],
          "timestamps": ["transactionDate", "transactionTime", "authorizationDateTime"],
          "statuses": ["responseCode", "issuerResponseCode"]
        },
        "nullableFields": [
          "originalTransactionId", "originalAuthorizationCode"
        ]
      }
    },
    "inputProcessingChains": {
      "visaFileProcessing": {
        "entryPoint": "NaasController.triggerFileIngestion",
        "chain": [
          {
            "step": "File Validation",
            "component": "EtlService",
            "method": "parseVisaFile",
            "validations": ["File exists", "CSV format", "Required headers"],
            "outputs": {
              "success": "List<VisaRecordDto>",
              "failure": "ETL_DLQ_TOPIC with error context"
            },
            "auditPoint": "AuditLogger.logFileProcessing",
            "dataQualityChecks": {
              "expectedRecordCount": 5000,
              "requiredFields": [
                "transactionId", "cardNumber", "amount", "Stan",
                "currencyCode", "transactionDate", "transactionTime"
              ],
              "dataTypeValidations": {
                "amount": "Decimal string normalization required",
                "transactionDate": "Date format MM/dd/yyyy",
                "transactionTime": "Time format HH:mm:ss"
              }
            }
          },
          {
            "step": "Record Parsing",
            "component": "EtlService",
            "method": "parseVisaFile",
            "validations": ["Field count", "Data types", "Required fields"],
            "outputs": {
              "success": "Parsed VisaRecordDto objects",
              "failure": "ETL_DLQ_TOPIC with parsing errors"
            },
            "metrics": ["naas.etl.records.parsed", "naas.etl.records.failed"],
            "transformations": [
              "Combine transactionDate and transactionTime into transaction_date_time",
              "Normalize decimal amounts",
              "Generate composite keys for fuzzy matching"
            ]
          }
        ]
      },
      "switchFileProcessing": {
        "entryPoint": "NaasController.triggerFileIngestion",
        "chain": [
          {
            "step": "File Validation",
            "component": "EtlService",
            "method": "parseSwitchFile",
            "validations": ["File exists", "SQL dump format"],
            "outputs": {
              "success": "List<SwitchRecordDto>",
              "failure": "ETL_DLQ_TOPIC with error context"
            },
            "auditPoint": "AuditLogger.logFileProcessing",
            "dataQualityChecks": {
              "expectedRecordCount": 4999,
              "requiredFields": [
                "transaction_id", "merchant_name", "merchant_id",
                "settlement_amount", "stan", "card_number"
              ],
              "dataTypeValidations": {
                "settlement_amount": "Must be decimal",
                "created_at": "Timestamp format yyyy-MM-dd HH:mm:ss"
              }
            }
          },
          {
            "step": "SQL Cleaning",
            "component": "EtlService",
            "method": "cleanSqlValue",
            "transformations": [
              "Remove quotes",
              "Handle NULL values",
              "Trim whitespace",
              "Normalize date formats",
              "Convert amounts to standard decimal format"
            ],
            "metrics": ["naas.etl.sql.cleaned", "naas.etl.sql.failed"]
          }
        ]
      }
    },
    "validationSequences": {
      "recordValidation": {
        "component": "ValidationService",
        "sequences": [
          {
            "name": "Basic Validation",
            "checks": [
              "Non-null mandatory fields",
              "Date format validation",
              "Currency code validation",
              "Amount range check"
            ],
            "auditPoint": "AuditLogger.logValidation",
            "expectedOutcomes": {
              "MATCH": 4500,
              "FUZZY_MATCH": 200,
              "UNMATCHED_SWITCH": 150,
              "UNMATCHED_VISA": 100,
              "WEIRD": 49
            }
          },
          {
            "name": "Business Rules",
            "checks": [
              "Transaction age check",
              "Duplicate detection",
              "Cross-field validations"
            ],
            "outputs": {
              "success": "Validated DTO",
              "failure": "ValidationException with context"
            },
            "fuzzyMatchingRules": {
              "primaryKey": "transaction_id",
              "fallbackKeys": [
                {
                  "combination": ["rrn", "authorization_code", "stan"],
                  "threshold": 0.95
                },
                {
                  "combination": ["amount", "card_number", "transaction_date_time"],
                  "threshold": 0.90
                }
              ]
            }
          }
        ],
        "metrics": [
          "naas.validation.total",
          "naas.validation.passed",
          "naas.validation.failed"
        ]
      }
    },
    "errorHandlingPaths": {
      "etlErrors": {
        "handler": "DlqRouter",
        "paths": [
          {
            "error": "FileNotFoundException",
            "action": "Log and notify",
            "retryStrategy": "None",
            "auditPoint": "AuditLogger.logError"
          },
          {
            "error": "ParseException",
            "action": "Route to ETL_DLQ_TOPIC",
            "retryStrategy": "None",
            "metrics": "naas.etl.errors"
          },
          {
            "error": "DataFormatException",
            "action": "Route to ETL_DLQ_TOPIC",
            "retryStrategy": "None",
            "notification": "AlertService"
          }
        ]
      },
      "validationErrors": {
        "handler": "ValidationService",
        "paths": [
          {
            "error": "ValidationException",
            "action": "Route to validation DLQ",
            "retryStrategy": "None",
            "auditPoint": "AuditLogger.logValidationError"
          },
          {
            "error": "BusinessRuleException",
            "action": "Route to validation DLQ",
            "retryStrategy": "None",
            "metrics": "naas.validation.errors"
          }
        ]
      },
      "normalizationErrors": {
        "handler": "NormalizationService",
        "paths": [
          {
            "error": "NormalizationException",
            "action": "Route to normalization DLQ",
            "retryStrategy": "Retry 3x with backoff",
            "auditPoint": "AuditLogger.logNormalizationError"
          },
          {
            "error": "TransformationException",
            "action": "Route to normalization DLQ",
            "retryStrategy": "None",
            "metrics": "naas.normalization.errors"
          }
        ]
      }
    },
    "auditLoggingPoints": {
      "fileProcessing": {
        "component": "EtlService",
        "events": [
          {
            "point": "File received",
            "data": ["filename", "size", "timestamp", "source_type"],
            "level": "INFO"
          },
          {
            "point": "Parsing complete",
            "data": ["recordCount", "duration", "errors", "source_type"],
            "level": "INFO"
          },
          {
            "point": "Processing error",
            "data": ["error", "stackTrace", "context", "source_type"],
            "level": "ERROR"
          }
        ]
      },
      "validation": {
        "component": "ValidationService",
        "events": [
          {
            "point": "Validation start",
            "data": ["recordCount", "type", "source_type"],
            "level": "DEBUG"
          },
          {
            "point": "Validation complete",
            "data": [
              "passed",
              "failed",
              "duration",
              "matchType",
              "source_type"
            ],
            "level": "INFO"
          }
        ]
      },
      "normalization": {
        "component": "NormalizationService",
        "events": [
          {
            "point": "Record normalization",
            "data": [
              "sourceType",
              "targetType",
              "status",
              "transformations_applied"
            ],
            "level": "DEBUG"
          },
          {
            "point": "Batch complete",
            "data": [
              "batchSize",
              "duration",
              "errors",
              "match_statistics"
            ],
            "level": "INFO"
          }
        ]
      }
    },
    "integrationTouchpoints": {
      "kafka": {
        "producer": {
          "component": "KafkaPublisherService",
          "touchpoints": [
            {
              "topic": "Matching_Input_Topic",
              "messageType": "Quant",
              "qos": {
                "acks": "all",
                "retries": 3,
                "batchSize": 16384
              },
              "monitoring": {
                "metrics": ["publish.success", "publish.failure"],
                "alerts": ["HighLatency", "BatchFailure"]
              }
            },
            {
              "topic": "Maas_DLQ_Topic",
              "messageType": "ErrorContext",
              "qos": {
                "acks": "1",
                "retries": 1
              },
              "monitoring": {
                "metrics": ["dlq.records"],
                "alerts": ["HighDLQRate"]
              }
            }
          ]
        }
      },
      "metrics": {
        "provider": "Micrometer",
        "endpoints": [
          {
            "path": "/actuator/metrics",
            "metrics": [
              "naas.processing.duration",
              "naas.queue.depth",
              "naas.errors.count",
              "naas.match.statistics"
            ],
            "tags": [
              "component",
              "errorType",
              "status",
              "matchType",
              "source"
            ]
          }
        ]
      },
      "healthChecks": {
        "endpoints": [
          {
            "path": "/actuator/health",
            "checks": ["kafka", "diskSpace", "queue"],
            "frequency": "30s"
          }
        ]
      }
    }
  }
} 